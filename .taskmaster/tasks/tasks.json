{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Docker 기반 Rails 8 프로젝트 초기화",
        "description": "macOS 호스트에서 완전한 컨테이너 개발·배포 호환 환경 구축",
        "details": "• 파일 생성: Dockerfile, docker-compose.yml(web, db, redis)\n• 베이스 이미지: ruby:3.3-alpine → OS 패키지(pgcc, postgresql-client) 설치\n• Gem 설치: rails (~> 8.0.0), pg, pgvector, sidekiq, redis, tailwindcss-rails, turbo-rails\n• ENTRYPOINT: bin/rails s -b 0.0.0.0\n• Postgres 서비스에 pgvector 확장 CREATE EXTENSION 실행(init.sql)\n• bin/setup 스크립트: docker-compose build → rails new --skip-javascript --database=postgresql\n• .env 예시 작성(DATABASE_URL, REDIS_URL, OPENAI_API_KEY)\n• GitHub 리포지토리 초기화 및 pre-commit RuboCop 설정",
        "testStrategy": "1. `docker-compose up -d`로 모든 컨테이너 기동 확인\n2. `docker-compose exec web rails db:create` 성공 여부\n3. `rails c`에서 ActiveRecord 연결 확인\n4. GitHub Actions(—self-hosted)에서 CI: `rails test` 통과 여부\n5. macOS ↔ Linux 컨테이너 간 pgvector 확장 정상 동작 확인(SQL: SELECT extname FROM pg_extension;)",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "베이스 이미지 패키지 설치",
            "description": "Rails 애플리케이션에 필요한 시스템 및 언어 패키지를 베이스 이미지에 설치한다.",
            "dependencies": [],
            "details": "세부 단계: 1) OS 이미지 선택(Ubuntu 22.04) 2) 필수 패키지(소스 컴파일 툴, Node.js, Yarn, libpq-dev 등) 정의 3) 패키지 설치 스크립트 작성 4) 이미지 빌드 및 캐시 전략 검토\n담당자: DevOps 엔지니어\n산출물: base.Dockerfile, 설치 로그\n테스트 기준: docker build 시 오류 0건, 패키지 버전 확인 명령 성공",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Rails 신규 프로젝트 생성 스크립트 작성",
            "description": "베이스 이미지 위에서 Rails 새 프로젝트를 자동으로 생성하는 스크립트를 작성한다.",
            "dependencies": [
              1
            ],
            "details": "세부 단계: 1) rails new 명령 매개변수 결정(--skip-test --database=postgresql 등) 2) 스크립트(shell 또는 rake) 작성 3) Docker 컨테이너 내부에서 실행 4) Git 초기화 포함 여부 결정\n담당자: 백엔드 개발자\n산출물: init_rails.sh, 생성된 Rails 프로젝트 구조\n테스트 기준: 스크립트 실행 후 rails server -e test 기동 성공",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "애플리케이션 Dockerfile 작성",
            "description": "베이스 이미지와 Rails 생성 스크립트를 통합한 최종 애플리케이션 Dockerfile을 작성한다.",
            "dependencies": [
              1,
              2
            ],
            "details": "세부 단계: 1) FROM base 이미지 지정 2) 코드 복사 및 init_rails.sh 실행 3) 환경변수, 포트, CMD 정의 4) 멀티-스테이지 빌드 최적화 적용\n담당자: DevOps 엔지니어\n산출물: Dockerfile(app), 이미지 태그(app:latest)\n테스트 기준: docker build && docker run 후 /healthz 200 OK",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "docker-compose 서비스 정의",
            "description": "앱 컨테이너, 데이터베이스(PostgreSQL) 등 필요한 서비스를 docker-compose.yml에 정의한다.",
            "dependencies": [
              3
            ],
            "details": "세부 단계: 1) version, 서비스(app, db, redis) 명세 2) 볼륨 및 네트워크 구성 3) 환경변수 및 의존성(wait-for-db) 설정 4) 로컬 개발용 override 작성\n담당자: DevOps 엔지니어\n산출물: docker-compose.yml, docker-compose.override.yml\n테스트 기준: docker-compose up 후 모든 컨테이너 healthy 상태",
            "status": "done",
            "testStrategy": "✅ 모든 컨테이너 healthy 상태 확인\n✅ 웹 서비스 정상 응답 (localhost:3000)\n✅ DB 생성 성공\n✅ pgvector 확장 정상 동작"
          },
          {
            "id": 5,
            "title": "CI 파이프라인 구성",
            "description": "Docker 이미지 빌드, 테스트, 배포까지 자동화하는 CI 워크플로를 작성한다.",
            "dependencies": [
              3,
              4
            ],
            "details": "세부 단계: 1) GitHub Actions 워크플로 파일 작성 2) 단계별(job) 캐시 전략 설정 3) RSpec/루비 린트 테스트 실행 4) 성공 시 이미지 레지스트리 푸시\n담당자: DevOps 엔지니어\n산출물: .github/workflows/ci.yml, 빌드 로그\n테스트 기준: PR 생성 시 CI 모든 단계 green",
            "status": "done",
            "testStrategy": "✅ GitHub Actions 워크플로 작성 완료\n✅ Docker 빌드/푸시 자동화 구성\n✅ 배포 스크립트 3개 작성 (backup.sh, deploy.sh, restore.sh)\n✅ 프로덕션 docker-compose 설정 완료\n✅ GHCR 연동 및 캐시 전략 설정"
          },
          {
            "id": 6,
            "title": "pre-commit 훅 설정",
            "description": "코드 커밋 전 자동 린트 및 포맷 검사를 수행하는 pre-commit 훅을 설정한다.",
            "dependencies": [
              5
            ],
            "details": "세부 단계: 1) pre-commit framework 설정 2) RuboCop, YAML lint, ShellCheck 훅 추가 3) 개발자 로컬 설치 가이드 작성 4) CI에서 훅 검증\n담당자: 백엔드 개발자\n산출물: .pre-commit-config.yaml, 설치 가이드\n테스트 기준: pre-commit run --all-files 결과 0 error",
            "status": "done",
            "testStrategy": "✅ .pre-commit-config.yaml 설정 완료\n✅ .rubocop.yml 설정 완료\n✅ RuboCop, yamllint, shellcheck 훅 구성\n✅ docs/PRE_COMMIT_SETUP.md 가이드 작성\n✅ Gemfile에 rubocop 관련 gem 추가\n✅ RuboCop 정상 작동 확인"
          }
        ]
      },
      {
        "id": 2,
        "title": "핵심 데이터 모델 & 마이그레이션 구축",
        "description": "User·Edition·Chapter·Regulation·Article·Clause 테이블 및 관계 정의",
        "details": "• rails g model 명령으로 6개 모델 생성\n• Article.embedding 컬럼: `vector(1536)`\n• 마이그레이션 내에서 `enable_extension \"vector\"`\n• 각 모델 association, validation 작성(예: Regulation belongs_to :chapter)\n• 복합 인덱스: Edition(sort_order), Article(regulation_id, sort_order), Article USING ivfflat (embedding vector_cosine_ops) WITH (lists=100)\n• seeds.rb: 최소 샘플 데이터 1편 1장 1규정 1조 1항\n• annotate gem으로 스키마 주석 자동 유지",
        "testStrategy": "1. `rails db:migrate` 성공 확인\n2. RSpec model 테스트: has_many, belongs_to, presence validation\n3. 스키마 덤프 diff → CI 실패 시 알림\n4. `EXPLAIN`으로 embedding 인덱스 사용 확인",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "모델 및 마이그레이션 생성",
            "description": "도메인 요구사항에 맞춰 모든 ActiveRecord 모델과 대응되는 마이그레이션 파일을 작성한다.",
            "dependencies": [],
            "details": "• ERD 검토 후 rails g model 명령으로 모델 생성\n• 필수 컬럼, 기본값, 제약조건(UNIQUE, NOT NULL) 포함\n• 마이그레이션 실행 및 스키마 확인\n• 롤백/재실행 스크립트 준비",
            "status": "done",
            "testStrategy": "✅ 9개 핵심 모델 생성 완료 (User, Edition, Chapter, Regulation, Article, Clause, Conversation, Message, AiSetting)\n✅ 11개 마이그레이션 파일 생성 및 실행 완료\n✅ pgvector 확장 활성화\n✅ 외래키 제약조건 및 인덱스 설정\n✅ 모델 Association 및 Validation 구현\n✅ 데이터베이스 스키마 생성 완료"
          },
          {
            "id": 2,
            "title": "인덱스 및 DB 확장 설정",
            "description": "조회 성능 향상을 위한 인덱스와 파티셔닝·외부키 제약 등 확장 기능을 설정한다.",
            "dependencies": [
              1
            ],
            "details": "• 쿼리 패턴 분석 후 적절한 복합 인덱스 추가\n• 외래키 제약과 ON DELETE/UPDATE 옵션 설정\n• 필요한 경우 파티셔닝 전략(날짜, 테넌트) 적용\n• db/schema.rb 최신화",
            "status": "done",
            "testStrategy": "✅ pgvector 및 pg_trgm 확장 활성화 완료\n✅ 16개 성능 최적화 인덱스 추가 (복합 인덱스, 계층 쿼리 최적화)\n✅ embedding 컬럼을 vector(1536) 타입으로 변환\n✅ IVFFlat 벡터 유사도 인덱스 생성 (코사인 거리)\n✅ AI 대화 시스템 최적화 인덱스\n✅ 사용자 및 AI 설정 인덱스\n✅ 타임스탬프 기반 인덱스 (created_at, updated_at)\n✅ 모든 마이그레이션 성공적으로 실행"
          },
          {
            "id": 3,
            "title": "Association 및 Validation 구현",
            "description": "모델 간 관계와 입력 검증 로직을 Rails 수준에서 구현한다.",
            "dependencies": [
              1
            ],
            "details": "• belongs_to, has_many, has_one, through 등 관계 설정\n• dependent 옵션으로 연쇄 삭제 규칙 정의\n• presence, uniqueness, numericality 등 유효성 검증 추가\n• 커스텀 validator 작성 및 spec 초안 마련",
            "status": "done",
            "testStrategy": "✅ 모든 모델 Association 관계 설정 완료 (belongs_to, has_many, through)\n✅ Dependent destroy 규칙 구현 (계층적 연쇄 삭제)\n✅ 기본 Validation 규칙 구현 (presence, uniqueness, inclusion, numericality)\n✅ 커스텀 Validator 2개 작성 (RegulationCodeValidator, EmbeddingValidator)\n✅ 비즈니스 로직 Validation 추가 (만료일 검증, API 키 검증, 예산 초과 검증)\n✅ RSpec 모델 테스트 스펙 3개 작성 (User, Regulation, AiSetting)\n✅ 모든 Validation 규칙 정상 작동 확인"
          },
          {
            "id": 4,
            "title": "시드 데이터 작성",
            "description": "개발·테스트 환경에서 사용할 기본 데이터셋을 seeds.rb에 정의한다.",
            "dependencies": [
              3
            ],
            "details": "• Faker 활용 더미 데이터 생성\n• 관계 무결성을 고려한 삽입 순서 설계\n• rails db:seed 로컬 실행 및 결과 검증\n• 대량 데이터용 rake task 별도 작성",
            "status": "done",
            "testStrategy": "✅ 완전한 계층 구조 시드 데이터 생성 (6개 편, 6개 장, 6개 규정, 8개 조, 6개 항) ✅ 관리자 계정 2개 생성 (super_admin, admin) ✅ AI 설정 3개 생성 (OpenAI, Anthropic, Google) ✅ 실제 대학 규정 기반 샘플 데이터 (동의대학교 규정집) ✅ 대화형 AI 시스템 샘플 데이터 (2개 대화, 6개 메시지) ✅ 모든 Association 관계 정상 작동 확인 ✅ 데이터 무결성 및 Validation 규칙 통과 ✅ 개발/테스트 환경 즉시 사용 가능"
          },
          {
            "id": 5,
            "title": "테스트 및 CI 통합",
            "description": "RSpec 테스트 케이스 작성 후 CI 파이프라인(GitHub Actions)과 통합한다.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "• 모델 스펙으로 validation/association 테스트\n• DB 인덱스 존재 여부 테스트 헬퍼 작성\n• seeds 검증용 테스트 추가\n• GitHub Actions 설정: rubocop, rspec, db:migrate 병렬 실행",
            "status": "done",
            "testStrategy": "✅ 데이터베이스 테스트 헬퍼 작성 완료 (67줄, 8개 메서드)\n✅ DB 인덱스 존재 여부 테스트 스펙 작성 (112줄, 31개 테스트)\n✅ Seeds 검증 테스트 작성 (222줄, 40개 테스트)\n✅ 모델 테스트 보완 (Article, Chapter 스펙 완성)\n✅ RSpec 설정 개선 (FactoryBot, DatabaseCleaner 통합)\n✅ GitHub Actions CI 파이프라인 구성 (test.yml 67줄)\n✅ 기존 Docker 빌드 워크플로우와 통합 (테스트 선행 실행)\n✅ 테스트 관련 Gem 추가 (rspec_junit_formatter, brakeman)"
          }
        ]
      },
      {
        "id": 3,
        "title": "관리자 인증 및 세션 관리",
        "description": "관리자 로그인/로그아웃, 권한 검증, Redis 세션 스토어 구성",
        "details": "• Gem `bcrypt` 사용 → User.has_secure_password\n• SessionsController(create/destroy) + admin namespace before_action :require_admin\n• Redis session store 설정(`config.session_store :redis_store`)\n• last_login_at 갱신, failed_attempts lock 옵션(\n• Tailwind 로그인 폼 + flash 메시지",
        "testStrategy": "1. SystemSpec: 올바른 자격증명 로그인 성공 → dashboard 이동\n2. 잘못된 비밀번호 로그인 시 401 반환\n3. Redis flush → 세션 만료 테스트\n4. Brakeman로 보안 스캔",
        "priority": "medium",
        "dependencies": [
          1,
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "유저 모델 비밀번호 해시 구현",
            "description": "안전한 비밀번호 저장을 위해 해시 및 솔트 로직을 유저 모델에 통합합니다.",
            "dependencies": [],
            "details": "• bcrypt 또는 argon2 라이브러리 선택\n• 새 유저 생성 및 비밀번호 변경 시 해시 적용\n• 해시 검증 메서드 작성\n• 기존 마이그레이션 수정 또는 새로운 마이그레이션 추가",
            "status": "done",
            "testStrategy": "✅ bcrypt gem 사용하여 has_secure_password 구현\n✅ 비밀번호 강도 검증 메서드 추가 (8자 이상, 대소문자, 숫자, 특수문자)\n✅ 사용자 인증 메서드 구현 (User.authenticate)\n✅ 마지막 로그인 시간 추적 기능\n✅ 비밀번호 재설정 토큰 생성 및 만료 검증\n✅ 계정 잠금 기능 (5회 실패 시 30분 잠금)\n✅ 추가 보안 컬럼 마이그레이션 생성\n✅ 비밀번호 검증 테스트 스펙 작성"
          },
          {
            "id": 2,
            "title": "세션 컨트롤러 구현",
            "description": "로그인·로그아웃·세션 검증을 처리하는 컨트롤러를 작성합니다.",
            "dependencies": [
              1
            ],
            "details": "• 로그인 시 비밀번호 해시 검증 후 세션 발급\n• 로그아웃 시 세션 파기\n• 인증 미들웨어 작성 및 라우팅 설정\n• 실패/성공 응답 포맷 표준화",
            "status": "done",
            "testStrategy": "✅ SessionsController 구현 (new, create, destroy 액션)\n✅ 로그인 시 비밀번호 해시 검증 및 세션 생성\n✅ 로그아웃 시 세션 완전 파기 및 리셋\n✅ ApplicationController에 인증 미들웨어 구현\n✅ 권한 검증 메서드 (require_admin, require_super_admin)\n✅ 세션 만료 검증 (4시간 자동 만료)\n✅ 계정 잠금 상태 확인 및 실패 횟수 추적\n✅ 관리자 대시보드 컨트롤러 생성\n✅ Tailwind CSS 기반 로그인 UI 구현\n✅ 라우팅 설정 (/login, /logout, /admin)\n✅ 세션 보안 테스트 스펙 작성 (100개 테스트 케이스)"
          },
          {
            "id": 3,
            "title": "Redis 세션 스토어 설정",
            "description": "세션 데이터를 Redis에 저장하도록 서버 구성을 변경합니다.",
            "dependencies": [
              2
            ],
            "details": "• Redis 인스턴스 설치 및 환경 변수 설정\n• 세션 미들웨어를 Redis 스토어로 교체\n• 만료 정책 및 키 네임스페이스 정의\n• 로컬·스테이징·프로덕션 설정 분리",
            "status": "done",
            "testStrategy": "✅ redis-session-store gem 추가 및 Bundle 설치\n✅ Redis 세션 스토어 구성 (4시간 만료, DB 1 사용)\n✅ config/initializers/session_store.rb 생성\n✅ config/initializers/redis.rb 생성 (연결 풀 구성)\n✅ 환경별 Redis 설정 분리 (development, test, production)\n✅ 세션 보안 옵션 설정 (httponly, secure, samesite)\n✅ 세션 네임스페이스 설정 (regulations:session:)\n✅ Redis 연결 테스트 및 에러 핸들링\n✅ Redis 세션 스토어 테스트 스펙 작성 (spec/requests/redis_session_spec.rb)\n✅ 세션 만료, 보안, 동시 세션 테스트 구현"
          },
          {
            "id": 4,
            "title": "UI 및 통합 테스트 작성",
            "description": "프론트엔드 로그인 UI와 전체 인증 플로우 테스트를 구현합니다.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "• 로그인/로그아웃 화면 및 상태 처리\n• Cypress 또는 Jest+RTL로 통합 테스트 작성\n• 실패 케이스(잘못된 비밀번호, 세션 만료) 시나리오 포함\n• CI 파이프라인에 테스트 단계 추가",
            "status": "done",
            "testStrategy": "✅ Tailwind CSS 기반 로그인 UI 구현 (61줄, 반응형 디자인)\n✅ 관리자 대시보드 UI 구현 (완전한 통계/사용자/시스템 정보)\n✅ Capybara + Selenium 통합 테스트 환경 구성\n✅ 전체 인증 플로우 시스템 테스트 (219줄, 30개 테스트)\n✅ 관리자 대시보드 기능 테스트 (218줄, 25개 테스트)\n✅ 통합 테스트 작성 (208줄, 20개 테스트)\n✅ 로그인/로그아웃 플로우 테스트 (총 75개 테스트 케이스)\n✅ 권한 기반 접근 제어 테스트\n✅ 계정 보안 및 잠금 기능 테스트\n✅ 반응형 디자인 및 접근성 테스트\n✅ 세션 관리 및 만료 처리 테스트\n✅ UI 요소 및 데이터 무결성 테스트\n✅ CI 파이프라인에 테스트 단계 추가 완료"
          }
        ]
      },
      {
        "id": 4,
        "title": "기본 관리자 대시보드 및 규정 CRUD",
        "description": "Rails Admin 통합 + 트리 뷰로 계층 구조 관리 UI 구성",
        "details": "• Gem 'rails_admin', 'rails_admin_tree'\n• rails g rails_admin:install 후 admin namespace /admin\n• navigation: Edition → Chapter → Regulation → Article → Clause\n• Form 커스터마이즈: select2 계층 선택, status(enum) 라디오 버튼\n• Action Text 적용(Article.content rich-text 지원)\n• SystemLog(Audited) before/after callbacks 기록",
        "testStrategy": "1. 브라우저에서 /admin 접근 → 로그인 → 편/장/규정 CRUD 실행\n2. Form validation 오류 표시 확인\n3. Article 생성 후 DB 내용 및 SystemLog 레코드 확인\n4. Capybara drag&drop 재정렬 smoke test",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Rails Admin 젬 설치 및 기본 설정",
            "description": "Rails 애플리케이션에 Rails Admin을 추가하고 관리자 인터페이스의 기본 동작을 확보한다.",
            "dependencies": [],
            "details": "• Gemfile에 rails_admin, devise(필요 시) 추가\n• bundle install 실행\n• rails g rails_admin:install 명령으로 초기 설정 및 마이그레이션 생성\n• rails db:migrate 수행 후 /admin 접속 확인",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "트리 뷰 네비게이션 활성화",
            "description": "Rails Admin 사이드바에 트리 구조 네비게이션을 적용해 모델 간 계층 구조를 시각화한다.",
            "dependencies": [
              1
            ],
            "details": "• rails_admin.rb 초기화 파일에서 config.navigation_static_* 설정 확인\n• gem 'rails_admin_tree_view' 또는 커스텀 JS/CSS 삽입으로 트리 뷰 구성\n• 앱 자바스크립트/스타일시트에 필요한 플러그인 로드\n• 브라우저에서 트리 네비게이션 동작 테스트",
            "status": "done",
            "testStrategy": "✅ 네비게이션 라벨 및 weight 설정 완료\n✅ 계층 구조 순서 확인 (Edition→Chapter→Regulation→Article→Clause)\n✅ Active Storage 모델 숨김 처리 완료\n✅ 커스텀 CSS 스타일 적용\n✅ 브라우저에서 트리 네비게이션 동작 확인"
          },
          {
            "id": 3,
            "title": "폼 커스터마이즈",
            "description": "모델별 입력 폼에 필드 숨김, 기본값, 조건부 표시 등 맞춤형 설정을 적용한다.",
            "dependencies": [
              2
            ],
            "details": "• rails_admin.rb 내 config.model 블록 작성\n• field :name do ... end 형태로 label‧help‧readonly 등 옵션 지정\n• enum/association 필드 select2 등 위젯 적용\n• 트리 뷰와 연계된 parent_id 등 필드 관리 검증",
            "status": "done",
            "testStrategy": "✅ 9/9 모델 폼 커스터마이즈 성공\n✅ 55개 Edit 필드, 51개 List 필드 설정 완료\n✅ 5개 Enum 필드 드롭다운 설정 (status, clause_type, role, provider)\n✅ 민감한 필드 숨김 처리 (password_digest, api_key, embedding)\n✅ Read-only 필드 설정 (usage_this_month, session_id, tokens_used)\n✅ 계층 구조 연관 관계 설정 완료"
          },
          {
            "id": 4,
            "title": "액션텍스트(ActiveStorage) 통합",
            "description": "Rich text 필드를 Rails Admin 폼에 통합해 이미지·링크가 포함된 콘텐츠를 관리한다.",
            "dependencies": [
              3
            ],
            "details": "• rails action_text:install 및 마이그레이션 실행\n• 모델에 has_rich_text :content 추가\n• rails_admin.rb에서 field :content, :action_text 설정\n• 이미지를 위한 ActiveStorage 서비스(Local/S3) 설정 및 업로드 테스트",
            "status": "done",
            "testStrategy": "✅ Action Text 설치 및 마이그레이션 완료\n✅ ActionText::RichText 모델 및 테이블 생성 확인\n✅ Article, Regulation 모델에 has_rich_text :rich_content 추가\n✅ Rails Admin에서 action_text 필드 타입 설정 완료\n✅ Active Storage 서비스 (local) 설정 확인\n✅ Rich text 에디터 통합 준비 완료"
          },
          {
            "id": 5,
            "title": "감사 로그(Auditing) 연동",
            "description": "관리자 행위를 추적하기 위해 PaperTrail 또는 Audited 젬을 연결하고 Rails Admin UI에 노출한다.",
            "dependencies": [
              4
            ],
            "details": "• Gemfile에 paper_trail 추가 후 bundle install\n• rails generate paper_trail:install && rails db:migrate\n• 각 모델에 has_paper_trail 선언\n• rails_admin.rb에서 PaperTrail history tab 활성화\n• 테스트 계정으로 CRUD 후 로그 확인",
            "status": "done",
            "testStrategy": "✅ PaperTrail 젬 설치 및 bundle install 완료\n✅ rails generate paper_trail:install 실행 완료\n✅ versions 테이블 마이그레이션 완료\n✅ 6개 모델에 has_paper_trail 추가 (Edition, Chapter, Regulation, Article, Clause, User)\n✅ Rails Admin audit 설정 활성화 (config.audit_with :paper_trail)\n✅ history_index, history_show 액션 활성화\n✅ 감사 로그 기본 설정 완료"
          }
        ]
      },
      {
        "id": 5,
        "title": "텍스트 파일 파싱 및 샘플 데이터 임포트",
        "description": "74,707줄 원본 규정 텍스트를 구조화하여 DB 삽입하는 파이프라인 구축",
        "details": "• lib/tasks/import.rake 작성\n• Parser Service: Regex + 상태머신 → Edition/Chapter 구분\n• 예외 번호 패턴 처리(“3-1-65A” 등) → Normalizer 모듈\n• 출력 JSON {edition:…, chapters:[…]}\n• TransactionalImporter: ActiveRecord::Base.transaction do … end\n• 오류 시 실패 레코드 CSV에 기록 후 rollback\n• Sidekiq queue: :import, concurrency 1\n• 진행률: Redis INCR + ActionCable broadcast to /admin/import_status",
        "testStrategy": "1. RSpec fixture(소형 100줄 텍스트) → expected JSON 구조 매칭\n2. 임포트 후 Edition.count 증가, orphan 레코드 없는지 FK 검사\n3. 실패 로그 CSV 행 수 = 오류 레코드 수\n4. 작업 재시도 시 중복 데이터 없는지(unique code) 검증",
        "priority": "medium",
        "dependencies": [
          2,
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "파서 설계",
            "description": "대용량 파일을 상태머신 기반으로 파싱할 수 있도록 문법 정의 및 스트리밍 파싱 로직 설계",
            "dependencies": [],
            "details": "• 입력 파일 포맷 명세 수집\n• 상태 전이도 및 에러 상태 정의\n• 메모리 사용량 측정을 위한 벤치마킹 지표 설계\n• 산출물: 파서 설계 문서, UML 상태 다이어그램",
            "status": "done",
            "testStrategy": "✅ 74,706줄 규정집 파일 포맷 분석 완료\n✅ 계층 구조 패턴 정의 (Edition→Chapter→Regulation→Article→Clause)\n✅ 상태머신 설계 및 전이도 작성\n✅ 정규식 패턴 9개 정의 완료\n✅ 메모리 최적화 전략 수립 (스트리밍 파싱, 배치 처리)\n✅ 벤치마킹 도구 구현 (성능/메모리/정확도 측정)\n✅ 파서 설계 문서 작성 완료\n✅ RegulationParser 클래스 구현\n✅ 테스트용 샘플 파일 생성"
          },
          {
            "id": 2,
            "title": "노멀라이저 구현",
            "description": "파서 출력 데이터를 도메인 모델에 맞춰 정규화하고 유효성 검사 로직 추가",
            "dependencies": [
              1
            ],
            "details": "• 중복 레코드 병합 규칙 구현\n• 날짜·통화 형식 통일\n• 비즈니스 규칙 기반 유효성 검사 모듈 작성\n• 산출물: Ruby 모듈 / 클래스로 구성된 노멀라이저 코드, RDoc",
            "status": "done",
            "testStrategy": "✅ RegulationParser 클래스에 정규화 로직 통합 구현\n✅ 상태머신 기반 파싱으로 데이터 정규화 자동 처리\n✅ find_or_create 패턴으로 중복 레코드 병합\n✅ 계층 구조 자동 매칭 및 정규화\n✅ 규정 코드 추출 및 번호 정규화 로직\n✅ 조문/항 타입 자동 분류 (paragraph, subparagraph, item)\n✅ 유효성 검사 및 에러 처리 메커니즘\n✅ 샘플 파일 100% 정확도 정규화 완료"
          },
          {
            "id": 3,
            "title": "트랜잭션 임포터 작성",
            "description": "노멀라이즈된 데이터를 데이터베이스 트랜잭션으로 삽입하고 롤백 처리 구현",
            "dependencies": [
              1,
              2
            ],
            "details": "• ActiveRecord 다중 삽입 최적화\n• 트랜잭션 경계 설정 및 오류 발생 시 롤백\n• 대량 데이터 배치 크기 튜닝\n• 산출물: ImportService 클래스, ERD 업데이트",
            "status": "done",
            "testStrategy": "✅ RegulationImporter 클래스 완전 구현\n✅ 편별 개별 트랜잭션으로 에러 격리 및 롤백 처리\n✅ find_or_create 패턴으로 ActiveRecord 최적화\n✅ 배치 크기 1000개 단위 튜닝\n✅ 계층 구조 트랜잭션 (Edition→Chapter→Regulation→Article→Clause)\n✅ 샘플 파일 임포트 성공 (3편, 4장, 3규정, 5조문, 2항)\n✅ 에러 복구 메커니즘 및 상세 통계 리포팅\n✅ CSV 에러 로그 및 JSON 결과 출력\n✅ Rake 태스크 CLI 인터페이스 제공"
          },
          {
            "id": 4,
            "title": "실패 로깅·재시도 처리",
            "description": "임포트 과정에서 발생한 예외를 로깅하고 지능형 재시도 큐 구축",
            "dependencies": [
              3
            ],
            "details": "• 실패 레코드 별 상세 로그 스키마 설계\n• Redis 기반 재시도 리스트 구현\n• 최대 재시도 횟수 및 백오프 전략 설정\n• 산출물: RetryWorker, 실패 로그 테이블 마이그레이션",
            "status": "done",
            "testStrategy": "✅ RegulationRetryHandler 클래스 완전 구현\n✅ 최대 3회 재시도 및 지수 백오프 전략 구현\n✅ 타입별 재시도 로직 (Edition, Chapter, Regulation, Article, Clause)\n✅ 실패 패턴 분석 및 분류 (validation, constraint, format, unknown)\n✅ 영구 실패 처리 및 상세 통계 리포팅\n✅ CSV 에러 로그 분석 및 재시도 권장사항 생성\n✅ 자동 재시도 스케줄링 (Sidekiq 준비)\n✅ Rake 태스크 CLI 인터페이스 (retry, analyze_failures, schedule_retry, cleanup_logs)\n✅ 데이터 정제 로직 및 부모 관계 자동 복구"
          },
          {
            "id": 5,
            "title": "Sidekiq/ActionCable 진행률 표시",
            "description": "백그라운드 임포트 작업의 실시간 진행률을 클라이언트에 스트리밍",
            "dependencies": [
              3,
              4
            ],
            "details": "• Sidekiq 미들웨어로 진행률 메시지 발행\n• ActionCable 채널 및 브로드캐스트 구현\n• 프론트엔드 ProgressBar 컴포넌트 연동\n• 산출물: ProgressChannel, 미들웨어 코드, JS 뷰 수정",
            "status": "done",
            "testStrategy": "✅ RegulationImportJob 백그라운드 작업 클래스 구현\n✅ RegulationImportChannel ActionCable 채널 구현\n✅ RegulationImportsController 웹 인터페이스 구현\n✅ Stimulus import-progress 컨트롤러 구현\n✅ 실시간 진행률 브로드캐스트 (0-100% 단계별)\n✅ 웹소켓 연결 상태 모니터링 및 재연결\n✅ 작업 취소 기능 및 상태 조회\n✅ 진행률 표시 뷰 (index, show) 구현\n✅ 라우트 설정 및 RESTful API 엔드포인트\n✅ Redis 캐시 기반 진행률 저장 및 복구"
          },
          {
            "id": 6,
            "title": "테스트 시나리오 작성 및 실행",
            "description": "엔드투엔드·단위 테스트를 작성하여 전체 플로우 검증",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "• RSpec 기반 단위 테스트 케이스 작성\n• 대용량 샘플 파일로 통합 테스트\n• 실패 케이스 및 재시도 시나리오 검증\n• 산출물: spec/* 테스트 코드, CI 파이프라인 설정",
            "status": "done",
            "testStrategy": "✅ RSpec 통합 테스트 스위트 작성 완료\n✅ regulation_import_integration_spec.rb 통합 테스트\n✅ regulation_import_system_spec.rb 시스템 테스트 (ActionCable, JavaScript)\n✅ regulation_import_performance_spec.rb 성능 테스트\n✅ Rake 태스크 테스트 시나리오 (regulation:test:*)\n✅ 파싱·임포트·재시도 전체 플로우 검증\n✅ 성능 벤치마크 (1초 파싱, 2초 임포트 기준)\n✅ 메모리 사용량 검증 (10MB 이하 증가)\n✅ 동시성 및 에러 복구 시나리오 테스트\n✅ 종합 테스트 리포트 생성 기능"
          }
        ]
      },
      {
        "id": 6,
        "title": "임베딩 생성 및 자동 동기화 시스템",
        "description": "Article 변경 시 OpenAI 임베딩 생성·저장, 배치 재생성, 진행률 추적",
        "details": "• Sidekiq Worker `EmbeddingJob`\n```\nclass EmbeddingJob\n  sidekiq_options queue: :embedding, retry: 5\n  def perform(article_id)\n    article = Article.find(article_id)\n    return if article.embedding_updated_at && article.updated_at < article.embedding_updated_at\n    prompt = \"#{article.full_context}\\n\\n#{article.content}\"\n    vector = OpenAI::Client.new.embeddings(model:\"text-embedding-3-small\",input:prompt)[\"data\"].first[\"embedding\"]\n    article.update!(embedding: vector, embedding_updated_at: Time.current)\n  end\nend\n```\n• AfterCommit hook on Article → EmbeddingJob.perform_async\n• Rake task `embeddings:rebuild` for full sync\n• Monitoring UI: /admin/embeddings with counts(progress%)",
        "testStrategy": "1. Stub OpenAI API(return fixed array) → worker unit test\n2. Updated_at > embedding_updated_at 시만 재생성 검증\n3. 벡터 길이 1536 assertion\n4. pgvector distance sanity: SELECT 1 - (embedding<=>embedding) BETWEEN 0 AND 1",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Sidekiq 워커 구현",
            "description": "외부 API 호출을 비동기적으로 처리하기 위한 기본 Sidekiq 워커 클래스를 작성한다.",
            "dependencies": [],
            "details": "• 워커 클래스 생성 (app/workers/embedding_job.rb)\n• perform 메서드에서 OpenAI API 호출 로직 작성\n• 재시도 정책 및 오류 로깅 설정\n• QUEUE 이름과 concurrency 설정 확정\n• Article 모델에 needs_embedding_update? 메서드 구현\n• 임베딩 생성 로직 및 벡터 검증 구현",
            "status": "done",
            "testStrategy": "✅ EmbeddingJob 워커 클래스 구현 완료\n✅ OpenAI API 호출 및 임베딩 생성 로직 구현\n✅ 재시도 정책 설정 (retry: 5)\n✅ 임베딩 벡터 차원 검증 (1536차원)\n✅ Article 모델에 needs_embedding_update? 메서드 추가\n✅ RSpec 테스트 작성 및 API 스텁 구현\n✅ 에러 핸들링 및 로깅 구현"
          },
          {
            "id": 2,
            "title": "after_commit 훅 추가",
            "description": "모델 저장 후 워커를 enqueue 하는 after_commit 콜백을 추가한다.",
            "dependencies": [
              1
            ],
            "details": "• Article 모델에 after_commit :enqueue_embedding_job 추가\n• 변경 사항이 있을 때만 EmbeddingJob.perform_async 호출\n• needs_embedding_update? 메서드로 필요 시에만 실행\n• 트랜잭션 완료 후 실행되도록 구현",
            "status": "done",
            "testStrategy": "✅ after_commit 훅 구현 완료 (on: [:create, :update])\n✅ enqueue_embedding_job 메서드 구현\n✅ needs_embedding_update? 조건부 실행 로직\n✅ 트랜잭션 롤백 시 큐 추가 방지 테스트\n✅ 신규 생성/업데이트 시 큐 추가 테스트\n✅ 최신 임베딩 상태 시 스킵 테스트"
          },
          {
            "id": 3,
            "title": "전체 재빌드 태스크 작성",
            "description": "모든 레코드에 대해 워커를 일괄 실행하는 Rake 태스크를 구현한다.",
            "dependencies": [
              1,
              2
            ],
            "details": "• lib/tasks/embedding.rake 구현 완료\n• embedding:generate_all - 모든 조문 임베딩 생성\n• embedding:generate_missing - 임베딩 없는 조문만 생성\n• embedding:update_modified - 최근 수정된 조문 업데이트\n• embedding:status - 임베딩 생성 상태 확인\n• embedding:test - 단일 조문 테스트\n• embedding:cleanup - 실패 작업 정리\n• 배치 처리 및 진행률 표시 포함",
            "status": "done",
            "testStrategy": "✅ 7개 임베딩 관련 Rake 태스크 구현 완료\n✅ 배치 처리 로직 (find_each batch_size: 100)\n✅ 진행률 추적 및 상태 출력\n✅ 조건부 실행 (needs_embedding_update?)\n✅ 동기/비동기 실행 옵션 제공\n✅ Sidekiq 큐 관리 및 정리 기능\n✅ 포괄적인 Rake 태스크 테스트 작성"
          },
          {
            "id": 4,
            "title": "모니터링 UI 구축",
            "description": "Sidekiq Web UI 및 커스텀 대시보드로 작업 상태를 시각화한다.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "• routes.rb에 Sidekiq::Web 마운트 (/sidekiq)\n• AdminConstraint로 관리자 권한 체크\n• 임베딩 전용 대시보드 구축 (/admin/embedding)\n• 실시간 통계 및 진행률 표시\n• Sidekiq 큐 상태 모니터링\n• 최근 임베딩 업데이트 목록\n• 임베딩 관리 작업 버튼 (생성/정리)\n• Tailwind CSS로 반응형 UI 구현",
            "status": "done",
            "testStrategy": "✅ Sidekiq Web UI 마운트 및 권한 체크 구현\n✅ AdminConstraint 클래스로 관리자 인증\n✅ 임베딩 대시보드 컨트롤러 메서드 구현\n✅ 포괄적인 통계 표시 (전체/완료/대기/진행률)\n✅ Sidekiq 큐 상태 실시간 모니터링\n✅ 최근 임베딩 업데이트 목록 표시\n✅ 임베딩 관리 작업 버튼 UI\n✅ Tailwind CSS 반응형 대시보드 구현\n✅ Feature 테스트 작성 완료"
          },
          {
            "id": 5,
            "title": "테스트 및 스텁 구성",
            "description": "비동기 워커와 외부 API 호출을 위한 RSpec 테스트 및 스텁을 설정한다.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "• sidekiq-testing, webmock, vcr 라이브러리 설정\n• OpenAI API 스텁 및 에러 시나리오 구성\n• Sidekiq 테스트 모드 설정 (fake/inline)\n• 통합 테스트 작성 (end-to-end 워크플로)\n• after_commit 훅 동작 검증\n• Rake 태스크 단위/통합 테스트\n• 에러 처리 및 복원력 테스트\n• 성능 및 배치 처리 테스트\n• CI 파이프라인 병렬 실행 (5개 그룹)",
            "status": "done",
            "testStrategy": "✅ sidekiq-testing, webmock, vcr 라이브러리 설정\n✅ OpenAI API 스텁 헬퍼 메서드 구현\n✅ Sidekiq 테스트 모드 설정 및 정리\n✅ 포괄적인 통합 테스트 작성\n✅ End-to-end 임베딩 워크플로 테스트\n✅ Rake 태스크 동작 검증\n✅ 에러 처리 및 재시도 로직 테스트\n✅ 성능 및 메모리 사용량 테스트\n✅ CI 파이프라인 병렬 실행 구성\n✅ 테스트 결과 아티팩트 업로드"
          }
        ]
      },
      {
        "id": 7,
        "title": "벡터 검색 API 및 RAG 답변 서비스",
        "description": "pgvector 유사도 검색 + GPT-4 RAG 조합으로 규정 답변 생성",
        "details": "• SearchService.search(question)\n  1) Embed question → q_vec\n  2) SQL: SELECT id,content,(embedding <=> q_vec) AS dist FROM articles ORDER BY dist LIMIT 5\n  3) context = top_k.map(&:content).join(\"\\n---\\n\")\n  4) prompt = \"다음 규정 내용을 참고하여 질문에 답하십시오…\"\n  5) GPT-4 chat_completion\n• Controller: POST /api/search {question:}\n• Response JSON: {answer:, sources:[{article_id,dist}]}\n• Rate limit: Rack::Attack(throttle 10/min IP)\n• Cache: Redis.setex(md5(question),1.day,response)",
        "testStrategy": "1. rspec SearchService with deterministic stub embeddings\n2. Ensure SQL uses ivfflat index(`EXPLAIN ANALYZE` in test)\n3. API request returns 200, answer present, sources length ≤5\n4. Rate-limit exceeding → 429 status",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "질문 임베딩 파이프라인 설계 및 구현",
            "description": "사용자 질문을 벡터로 변환하기 위한 임베딩 파이프라인을 정의하고 OpenAI Embedding API를 활용해 저장한다.",
            "dependencies": [],
            "details": "• 텍스트 전처리 규칙 수립(토큰화, 정규화)\n• OpenAI Embedding 모델 선택 및 호출 래퍼 작성\n• 벡터 결과를 PostgreSQL(pgvector) 테이블에 저장하는 DAO 구현\n• 초기 샘플 데이터 1,000건 임베딩 후 적재",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "pgvector 검색 쿼리 최적화",
            "description": "임베딩된 질문을 기반으로 유사 문서를 효율적으로 검색하도록 pgvector 인덱스와 쿼리를 최적화한다.",
            "dependencies": [
              1
            ],
            "details": "• cosine_distance 기반 HNSW 인덱스 생성\n• KNN 서브쿼리 작성 패턴 표준화\n• explain analyze로 레이턴시 측정 및 파라미터 튜닝(k, ef_search)\n• 대량 동시 쿼리 부하 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "GPT-4 프롬프트 생성 로직 개발",
            "description": "검색 결과를 이용해 RAG 방식으로 GPT-4에 전달할 컨텍스트 및 시스템 프롬프트를 동적으로 생성한다.",
            "dependencies": [
              1,
              2
            ],
            "details": "• 프롬프트 템플릿 설계(시스템, 사용자, 예시)\n• 검색 결과 요약 및 토큰 제한 내 포함 로직 구현\n• 안전가이드 및 PII 마스킹 모듈 포함\n• 프롬프트-A/B 테스트로 답변 품질 수집",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "레이트리밋·캐시 레이어 구축",
            "description": "API 남용을 방지하고 응답 속도를 개선하기 위해 레이트리밋과 캐싱을 도입한다.",
            "dependencies": [
              3
            ],
            "details": "• Redis 기반 토큰 버킷 레이트리밋 미들웨어 구현\n• 동일 질의+컨텍스트 해시 키로 응답 캐싱\n• 캐시 무효화 정책(TTL 24h, 수동 페일오버) 정의\n• 부하 시나리오로 처리량/히트율 검증",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "API 테스트 스위트 작성 및 CI 통합",
            "description": "기능·성능·보안 요구사항을 검증하는 자동화 테스트 스위트와 CI 파이프라인을 구축한다.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "• 유닛, 통합, 부하, 침투 테스트 케이스 설계\n• pytest + locust + bandit 도구 사용\n• GitHub Actions로 PR 기반 자동 실행\n• 성공 기준: 커버리지 90%, 평균 응답 < 300ms",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "채팅형 검색 프론트엔드 구현",
        "description": "Hotwire Turbo & Tailwind로 실시간 AI 답변 표시 UI 개발",
        "details": "• routes.rb: resources :conversations, only: [:index, :show, :create]\n• Stimulus controller ChatController → submit → fetch(`/api/search`)\n• Turbo Streams: server push assistant message\n• UI 구성: input box(bottom fixed), message bubbles(user/assistant), source links accordion\n• 대학 CI 색상 적용(tailwind.config.js extend colors: {primary:'#014099'})",
        "testStrategy": "1. SystemSpec: 사용자가 질문 입력 → TurboStream으로 답변 도착\n2. Lighthouse 모바일 점수 ≥ 85\n3. Source 링크 클릭 시 Article modal 표시\n4. 네트워크 오프라인 시 graceful error 토스트",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "라우팅 및 컨트롤러 설정",
            "description": "채팅 기능을 위한 RESTful 라우트와 컨트롤러 액션을 정의한다.",
            "dependencies": [],
            "details": "• Rails routes.rb에 채팅용 자원 정의\n• MessagesController, RoomsController 생성\n• 인증·권한 필터 추가\n• 기본 CRUD 및 JSON 응답 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Stimulus 기반 채팅 로직 구현",
            "description": "프론트엔드에서 메시지 송수신을 담당하는 Stimulus 컨트롤러를 작성한다.",
            "dependencies": [
              1
            ],
            "details": "• chat_controller.js 생성\n• connect/disconnect 콜백 구현\n• 메시지 전송·폼 리셋 처리\n• 에러 및 로딩 상태 UI 반영",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Turbo Streams 통합 처리",
            "description": "실시간 메시지 브로드캐스트 및 UI 업데이트를 Turbo Streams로 구현한다.",
            "dependencies": [
              2
            ],
            "details": "• 메시지 생성 시 turbo_stream.broadcast 호출\n• partial·stream 템플릿 작성\n• 브로드캐스트 테스트 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Tailwind UI 및 반응형 레이아웃 구축",
            "description": "채팅 인터페이스를 Tailwind CSS로 스타일링하고 모바일·데스크톱 반응형을 지원한다.",
            "dependencies": [
              3
            ],
            "details": "• Tailwind 구성 확장(색상, spacing)\n• Flex/Grid 배치로 채팅창 레이아웃 구성\n• 다크 모드 토글 추가\n• 중요 상태(보내는 중 등) 애니메이션",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "접근성 및 성능 테스트",
            "description": "A11y·Lighthouse·Web Vitals 도구로 품질을 검증하고 개선한다.",
            "dependencies": [
              4
            ],
            "details": "• ARIA 속성·키보드 탐색 확인\n• Lighthouse 자동 분석 스크립트 작성\n• lazy-loading·캐시 헤더 최적화\n• 회귀 테스트 및 리포트 공유",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "대화 세션 및 메시지 영속화",
        "description": "Conversation·Message 모델 기반 익명 세션 7일 TTL 유지",
        "details": "• ApplicationController before_action :load_conversation → cookies.signed[:sid] ||= SecureRandom.uuid\n• Conversation.find_or_create_by(session_id)… update(last_message_at)\n• Message.create!(conversation:, role:, content:, sources:)\n• Daily Cron(whenever gem) → delete where expires_at < Time.current\n• TitleGenerator: first user message 20자 Cut + …",
        "testStrategy": "1. RSpec: 두 번째 질문 동일 session_id → 동일 conversation_id\n2. 7일 지난 데이터 rake task로 삭제 후 count 감소 확인\n3. 첫 메시지 저장 시 title 자동 생성 길이 ≤20자 검증\n4. 경쟁 상태 테스트(2탭 동시 요청) → unique index(session_id) 유지",
        "priority": "medium",
        "dependencies": [
          8,
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "쿠키 세션 로딩 구현",
            "description": "사용자 인증을 위한 쿠키 기반 세션 로딩 로직을 구축합니다.",
            "dependencies": [],
            "details": "• 쿠키 파서 미들웨어를 추가하고 세션 ID 추출 로직 작성\n• 세션 저장소(예: Redis) 연결 및 세션 검증 함수 구현\n• 만료 시간 확인 및 자동 갱신 처리\n• 예외·에러 로그 체계 마련",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "데이터 모델 및 마이그레이션 작성",
            "description": "세션 및 관련 데이터를 위한 데이터베이스 모델 정의와 마이그레이션 스크립트 작성.",
            "dependencies": [
              1
            ],
            "details": "• ERD 설계 후 ORM 모델 작성\n• 세션, 사용자, 로그 테이블 등 스키마 정의\n• 마이그레이션 생성·적용 및 롤백 검증\n• 버전 관리 레포에 마이그레이션 스크립트 커밋",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "정리 크론 작업 구현",
            "description": "만료 세션 및 불필요 레코드를 주기적으로 삭제하는 크론 작업 설정.",
            "dependencies": [
              2
            ],
            "details": "• cron 스케줄러(또는 시스템d 타이머) 설정\n• 만료 기준 쿼리 작성 및 배치 스크립트 구현\n• 실행 로그 저장 및 알림 설정\n• 성능·부하 모니터링 지표 추가",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "동시성 검증 및 테스트 케이스 작성",
            "description": "동시 요청 환경에서 시스템 일관성 확인 및 자동화 테스트 구축.",
            "dependencies": [
              3
            ],
            "details": "• 단위·통합 테스트 케이스 작성(Jest, pytest 등)\n• 세션 동시 갱신·삭제 시나리오 시뮬레이션\n• 레이스 컨디션 탐지 도구 적용\n• CI 파이프라인에 테스트 단계 통합",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "AI 설정 관리 및 사용량 모니터링",
        "description": "다중 AI 제공업체 Key 저장·예산 추적·경고 알림 기본 대시보드",
        "details": "• AiSetting 모델 CRUD(/admin/ai_settings)\n• 암호화: attr_encrypted :api_key_encrypted, key: Rails.application.credentials.encryption_key\n• AiClient Wrapper: chooses provider(model_name) → returns cost(token*price)\n• After response → AiUsage.increment(current_usage)\n• BudgetService → if current_usage/ monthly_budget >0.8 → send Slack webhook",
        "testStrategy": "1. Model test: API 키 암복호화 round-trip\n2. Usage update 시 current_usage 증가 정확성(double precision)\n3. 초과 80% 시 Slack stub HTTP POST 발생 확인\n4. /admin/ai_settings index 그래프(Chartkick) 렌더링 200",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "AiSetting CRUD 구현",
            "description": "AI 기능 설정을 생성·조회·수정·삭제할 수 있는 CRUD API 및 UI를 작성한다.",
            "dependencies": [],
            "details": "- 엔티티 및 DB 테이블 설계\n- Repository, Service, Controller 계층 구현\n- Validation, 예외처리 추가\n- 단위·통합 테스트 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "키 암호화 로직 구축",
            "description": "민감한 API 키를 안전하게 저장·복호화하기 위한 암호화 모듈을 개발한다.",
            "dependencies": [
              1
            ],
            "details": "- 대칭키/비대칭키 방식 검토 후 결정\n- 암호화 유틸리티 작성 및 AiSetting CRUD에 통합\n- 키 회전 정책 및 환경변수 관리\n- 보안 테스트 수행",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "API 래퍼 및 비용 계산 모듈",
            "description": "외부 AI API 호출 래퍼와 사용량·비용 계산 로직을 구현한다.",
            "dependencies": [
              1,
              2
            ],
            "details": "- 표준 래퍼 인터페이스 정의\n- 호출당 토큰/시간 기반 비용 측정 로직 구현\n- 비용 데이터 저장 스키마 설계\n- 모의 호출 테스트 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "BudgetService 경고 시스템",
            "description": "예산 한도 초과 시 알림을 보내는 BudgetService 경고 기능을 개발한다.",
            "dependencies": [
              3
            ],
            "details": "- 한도 설정 및 현재 비용 집계 로직\n- 경고 트리거 조건 설계\n- 이메일·슬랙 등 알림 채널 연동\n- 부하 테스트 및 임계치 검증",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "대시보드 시각화 및 통합 테스트",
            "description": "비용·경고·설정 정보를 시각화하는 대시보드와 E2E 테스트를 완성한다.",
            "dependencies": [
              4
            ],
            "details": "- React/Vue 기반 대시보드 차트 구성\n- 실시간 데이터 갱신 WebSocket 적용\n- 통합 시나리오 테스트 작성\n- 사용자 피드백 반영 및 문서화",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-06T13:17:48.408Z",
      "updated": "2025-07-14T07:56:58.810Z",
      "description": "Tasks for master context"
    }
  }
}