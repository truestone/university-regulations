{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "로컬 개발 환경 구축 (Rails 8 + PostgreSQL + pgvector)",
        "description": "프로젝트의 모든 후속 작업을 위한 기본 로컬 환경을 설치하고 검증한다.",
        "details": "1) Homebrew 또는 패키지 매니저로 PostgreSQL 14, Redis, Ruby 3.2 설치\n2) `rails new regulations_ai -d postgresql --css=tailwind` 실행 후 pgvector 확장 활성화:\n   ```bash\n   rails db:create\n   rails db\n   CREATE EXTENSION IF NOT EXISTS vector;\n   \\q\n   ```\n3) `Procfile.dev` 작성하여 Hotwire + Redis + Rails 동시 기동\n4) `config/database.yml` 에 개발/테스트용 DB 연결 설정, 환경 변수 처리\n5) `.env` 에 AI API KEY, REDIS URL 등 개발용 시크릿 저장\n6) `bin/rails s` 로 서버 기동, `rails console` 에서 벡터 컬럼 테스트:\n   ```ruby\n   ActiveRecord::Base.connection.execute(\"SELECT '[[0.1,0.2]]'::vector\");\n   ```\n7) README 에 환경 구축 스크립트 문서화",
        "testStrategy": "- `rails db:migrate` 수행 시 오류 없는지 확인\n- pgvector 확장이 `SELECT * FROM pg_extension` 로 조회되는지 검증\n- `curl http://localhost:3000` 200 응답 확인\n- Redis 연결 및 세션 저장 여부 확인\n- VSCode Remote Container(선택)로 재현 가능 여부 테스트",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "패키지 매니저 설치 및 필수 의존성 확인",
            "description": "예상 소요 시간: 30분. 완료 조건: Homebrew(또는 apt) 설치 확인, Ruby 3.x, Node.js 18.x, Yarn, PostgreSQL 15, Redis 7이 정상 동작함을 확인하고 버전을 기록한다.",
            "dependencies": [],
            "details": "1) OS별 패키지 매니저(Homebrew/apt) 설치 및 업데이트\n2) 필수 패키지(Ruby, Node.js, Yarn, PostgreSQL, Redis) 설치\n3) `ruby -v`, `node -v`, `yarn -v`, `psql --version`, `redis-server --version`로 버전 확인\n4) 결과를 터미널 캡처 또는 로그 파일로 저장",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Rails 프로젝트 생성 및 데이터베이스 초기화",
            "description": "예상 소요 시간: 45분. 완료 조건: Rails 7 프로젝트가 생성되고 `rails db:create db:migrate` 가 성공적으로 수행된다.",
            "dependencies": [
              1
            ],
            "details": "1) `rails new myapp -d postgresql`로 프로젝트 생성\n2) `cd myapp` 후 `bundle install`\n3) `config/database.yml`에 로컬 DB 접속 정보 설정\n4) `rails db:create db:migrate` 실행하여 초기 스키마 적용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "pgvector 확장 설정과 테스트",
            "description": "예상 소요 시간: 40분. 완료 조건: `pgvector` 확장이 데이터베이스에 설치되고 간단한 벡터 검색 쿼리가 정상 동작한다.",
            "dependencies": [
              2
            ],
            "details": "1) `brew install pgvector` 또는 `CREATE EXTENSION IF NOT EXISTS vector;`\n2) Gemfile에 `gem 'pgvector'` 추가 후 `bundle install`\n3) 마이그레이션 생성하여 `enable_extension 'vector'` 실행\n4) 간단한 모델/레코드 생성 후 벡터 칼럼에 값 저장, 유사도 검색 쿼리 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Procfile·환경변수·.env 구성",
            "description": "예상 소요 시간: 25분. 완료 조건: Procfile 및 `.env` 파일이 작성되어 `foreman start` 로 웹·워크·redis 모두 기동된다.",
            "dependencies": [
              3
            ],
            "details": "1) Procfile에 `web`, `worker`, `redis` 프로세스 정의\n2) dotenv-rails gem 추가 후 `.env`에 DATABASE_URL, REDIS_URL 등 변수 정의\n3) `foreman start` 또는 `heroku local` 로 모든 프로세스 구동 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "서버·콘솔 기동 검증 스크립트 작성",
            "description": "예상 소요 시간: 30분. 완료 조건: `bin/check_env.sh` 실행 시 웹 서버, 콘솔, Redis 연결 상태를 자동 검증하여 0으로 종료한다.",
            "dependencies": [
              4
            ],
            "details": "1) Bash 스크립트 작성: 포트 체크(3000), `rails runner 'puts :ok'`, `redis-cli ping` 포함\n2) 실패 시 비제로 종료 코드 반환, 성공 시 ‘All services up’ 출력\n3) CI에서도 사용 가능하도록 `chmod +x bin/check_env.sh` 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "README 문서화 및 재현 검증",
            "description": "예상 소요 시간: 35분. 완료 조건: README에 설치·기동·검증 단계가 문서화되고, 새 환경에서 따라 해본 결과 모든 스텝이 통과한다.",
            "dependencies": [
              5
            ],
            "details": "1) 각 단계별 명령어·주의사항·스크린샷 포함 README 작성\n2) 새 클린 머신/컨테이너에서 README대로 실행하여 재현성 검증\n3) 문제점 발견 시 README와 스크립트 수정 후 다시 테스트",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "데이터베이스 스키마 및 모델 정의",
        "description": "12개 핵심/지원 모델과 관계, 인덱스를 정의하는 Rails 마이그레이션 생성",
        "details": "1) `rails g model` 명령으로 User, Edition, Chapter 등 모델 생성\n2) FK/복합 unique 제약 추가 예:\n   ```ruby\n   add_index :chapters, [:edition_id, :number], unique: true\n   ```\n3) Article 테이블에 `embedding :vector, limit: 1536` 컬럼 추가\n4) 모델 간 `has_many`, `belongs_to` 관계 설정 및 `inverse_of` 지정\n5) 상태 관리(enum) 추가: Regulation.status { active:0, abolished:1 }\n6) `db/seeds.rb` 에 최소 샘플 데이터 작성",
        "testStrategy": "- `rails db:migrate` 수행 후 스키마.rb 확인\n- Rails console에서 `Edition.first.chapters.create!(...)` 가능 여부\n- 외래키 위반 시 예외 발생 확인\n- RSpec Model spec으로 validation, enum, 관계 테스트",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "모델 목록 확정",
            "description": "프로젝트에 필요한 12개 도메인 모델과 속성을 최종 결정한다.",
            "dependencies": [],
            "details": "요구사항 문서와 ERD 초안을 검토하여 모델 이름, 주요 컬럼, 비즈니스 규칙을 정의하고 사양서를 작성한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "마이그레이션 작성",
            "description": "확정된 모델 기반으로 DB 마이그레이션 파일을 생성한다.",
            "dependencies": [
              1
            ],
            "details": "Rails generate 명령으로 각 모델의 create_table 마이그레이션을 만들고 컬럼 타입·옵션을 기술한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "관계·인덱스 추가",
            "description": "모델 간 관계 선언과 인덱스를 설정한다.",
            "dependencies": [
              2
            ],
            "details": "belongs_to, has_many 등을 선언하고 외래키 및 성능 향상을 위한 인덱스를 마이그레이션에 추가한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "enum 및 validation 구현",
            "description": "도메인 규칙에 따른 enum과 유효성 검사를 추가한다.",
            "dependencies": [
              3
            ],
            "details": "ActiveRecord enum, validates _presence/uniqueness 등으로 데이터 무결성을 확보한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Seed 데이터 작성",
            "description": "개발·테스트용 초기 데이터를 구성한다.",
            "dependencies": [
              4
            ],
            "details": "db/seeds.rb에 각 모델별 예시 레코드를 작성하고 Faker로 더미 데이터를 생성한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "RSpec 모델 테스트 작성",
            "description": "모델 로직, 관계, validation, enum이 올바르게 동작하는지 검증한다.",
            "dependencies": [
              4
            ],
            "details": "RSpec & FactoryBot을 이용해 validation 실패/성공 케이스, 관계 메서드 테스트, enum 값 확인 테스트를 작성한다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "기본 인증 및 관리자 UI 뼈대 구축",
        "description": "관리자 전용 CRUD 인터페이스의 최소 기능과 인증 플로우를 만든다.",
        "details": "1) `rails g controller sessions new create destroy` 로 세션 컨트롤러 작성\n2) User 모델에 `has_secure_password` 추가, bcrypt gem\n3) Tailwind 기반 레이아웃과 NavBar 작성, Hotwire Turbo Frame 사용\n4) Administrators 전용 namespace(Route `/admin`) 생성하여 Editions/Chapters 등 scaffold:\n   ```bash\n   rails g scaffold Edition number:integer title:string is_active:boolean\n   ```\n5) Pundit 또는 자체 before_action 으로 role 기반 접근 제어",
        "testStrategy": "- `rails db:seed` 로 admin 계정 생성 후 로그인 테스트\n- 비로그인 상태에서 /admin 접근 시 로그인 페이지로 리다이렉트 확인\n- CRUD 각 액션에서 Validation 에러, 플래시 메시지 확인\n- 모바일·데스크탑 반응형 확인",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "세션 컨트롤러 및 로그인/로그아웃 플로우 구축",
            "description": "Rails 세션 컨트롤러(SessionController) 생성과 로그인, 로그아웃 액션 및 라우팅 설정",
            "dependencies": [],
            "details": "필요 코드: app/controllers/session_controller.rb, app/views/session/new.html.erb, config/routes.rb 수정\n체크리스트:\n- [ ] new, create, destroy 액션 구현\n- [ ] 로그인 폼 뷰 작성\n- [ ] flash 메시지 및 redirect 동작 확인\n- [ ] 세션 쿠키 설정 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "User 모델 패스워드 해시 및 seed 데이터",
            "description": "bcrypt로 패스워드 해시 저장, 기본 관리자 계정 seed 작성",
            "dependencies": [
              1
            ],
            "details": "필요 코드: app/models/user.rb, db/migrate/*_create_users.rb, db/seeds.rb\n체크리스트:\n- [ ] has_secure_password 적용\n- [ ] email/role 컬럼 추가 migration\n- [ ] 기본 admin 레코드 seed\n- [ ] 유효성 검증 단위 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Tailwind 기반 레이아웃·네비게이션",
            "description": "Tailwind CSS 설치 및 application layout 구성, 상단 네비게이션 바 추가",
            "dependencies": [
              2
            ],
            "details": "필요 코드: app/views/layouts/application.html.erb, app/assets/stylesheets/tailwind.config.js, app/components/nav_bar_component.rb\n체크리스트:\n- [ ] Tailwind gem 설치 및 빌드 확인\n- [ ] 레이아웃에 container, grid 적용\n- [ ] 로그인 상태별 메뉴 렌더링\n- [ ] 다크 모드 토글 버튼",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "/admin 네임스페이스 scaffold 생성",
            "description": "Rails scaffold 명령으로 Admin::Dashboard 등 뼈대 생성, 엔티티 관리 UI 템플릿",
            "dependencies": [
              3
            ],
            "details": "필요 코드: app/controllers/admin/*, app/views/admin/*, config/routes.rb 네임스페이스\n체크리스트:\n- [ ] rails g scaffold admin/dashboard title:string\n- [ ] 네임스페이스 라우트 확인\n- [ ] Tailwind 레이아웃 상속 적용\n- [ ] CRUD 화면 정상 렌더링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "권한 관리(before_action 또는 Pundit)",
            "description": "관리자 전용 페이지 보호 로직 추가, Pundit 정책 또는 before_action 활용",
            "dependencies": [
              4
            ],
            "details": "필요 코드: app/policies/*.rb (또는 controller concern), app/controllers/application_controller.rb 수정\n체크리스트:\n- [ ] current_user 헬퍼 메서드 작성\n- [ ] admin? 검사 및 리다이렉트 처리\n- [ ] 정책 테스트 추가\n- [ ] 접근 제한 메시지 UI",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "반응형 뷰 및 Turbo Frame 통합",
            "description": "Hotwire(Turbo)로 CRUD 부분 새로고침 최소화, 모바일 레이아웃 대응",
            "dependencies": [
              5
            ],
            "details": "필요 코드: app/views/admin/**/*_turbo_stream.erb, responsive Tailwind classes, stimulus controllers\n체크리스트:\n- [ ] index/new/edit 뷰에 turbo_frame_tag 적용\n- [ ] stimulus로 모달 폼 연결\n- [ ] 모바일 breakpoints 검증\n- [ ] Lighthouse Performance 80점 이상",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "통합 테스트 및 브라우저 테스트",
            "description": "RSpec + Capybara + Hotwire 테스트, 로그인·권한·CRUD 시나리오 커버",
            "dependencies": [
              6
            ],
            "details": "필요 코드: spec/features/auth_spec.rb, spec/features/admin_spec.rb, spec/system/*.rb, spec/support/capybara.rb\n체크리스트:\n- [ ] 로그인 성공/실패 시나리오\n- [ ] 비관리자 접근 제한 시나리오\n- [ ] Turbo Frame 작동 확인\n- [ ] GitHub Actions CI 통합",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "규정 원본 파일 업로드 및 인코딩 자동 감지",
        "description": "`regulations*.txt` 대용량 파일을 업로드하고 EUC-KR ↔ UTF-8 변환을 수행한다.",
        "details": "1) ActiveStorage(Local Disk) 설정 후 RegulationUpload 모델 생성\n2) 업로드 폼에서 300MB 제한, 파일명 패턴 정규식 `/^regulations.*\\.txt$/`\n3) `charlock_holmes` 젬으로 인코딩 탐지:\n   ```ruby\n   detector = CharlockHolmes::EncodingDetector.detect(file.read(4096))\n   encoding = detector[:encoding]\n   utf8_text = file.read.encode('UTF-8', encoding)\n   ```\n4) Sidekiq(Job) 큐에 원본 파일 경로 전달, 스트리밍 방식으로 S3(옵션) 저장",
        "testStrategy": "- EUC-KR, UTF-8 샘플 파일 업로드 → DB에 binary 저장 여부\n- 잘못된 파일명 업로드 시 오류 메시지 확인\n- 70k+ lines 파일 업로드 후 메모리 사용량 측정 (<500MB)\n- 업로드 후 Job 큐에 enqueued 되는지 Sidekiq Web에서 확인",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "ActiveStorage 설정 및 모델 생성",
            "description": "Rails에서 대용량 파일을 저장할 수 있도록 ActiveStorage를 설정하고 규정(Policy) 모델에 첨부 필드를 추가한다.",
            "dependencies": [],
            "details": "위험 요소: DB 및 S3 버킷 권한·용량 부족, 마이그레이션 실패.\n롤백 전략: 마이그레이션 이전 스키마 백업, S3 버킷 버전 관리 활성화 후 문제 발생 시 이전 버전으로 복원.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "업로드 폼/뷰 구현(300MB 제한)",
            "description": "파일 입력 UI를 작성하고 클라이언트·서버 양쪽에서 300MB 제한을 적용한다.",
            "dependencies": [
              1
            ],
            "details": "위험 요소: 브라우저 타임아웃, 사용자의 파일 크기 오판.\n롤백 전략: 제한값을 ENV로 분리해 긴급 시 즉시 상향/하향 조정 가능하도록 하고, 기능 비활성화 토글 스위치 제공.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "파일명 패턴 검증 로직",
            "description": "규정 파일명 규칙(예: YYYYMMDD_policy.csv)을 정규식으로 검증해 잘못된 파일 업로드를 차단한다.",
            "dependencies": [
              2
            ],
            "details": "위험 요소: 정규식 오검출로 정상 파일 거부, 국제화 문자 처리 오류.\n롤백 전략: 검증 로직을 feature flag로 감싸 비활성화 가능, 로그에 원본 파일명 보존.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "charlock_holmes 인코딩 감지 및 변환",
            "description": "업로드된 CSV의 문자 인코딩을 감지해 UTF-8로 변환하고 BOM 제거를 수행한다.",
            "dependencies": [
              3
            ],
            "details": "위험 요소: 감지 실패로 인한 깨짐, 대용량 변환 시 메모리 폭주.\n롤백 전략: 변환 실패 시 원본 그대로 저장 후 알림, charlock_holmes 버전 고정 및 이전 버전으로 재배포 가능.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "스트리밍 업로드와 메모리 관리",
            "description": "IO copy_stream 등을 이용해 파일을 스트리밍 방식으로 처리하여 메모리 사용량을 최소화한다.",
            "dependencies": [
              4
            ],
            "details": "위험 요소: 스트림 중단 시 파일 손상, 서버 메모리 누수.\n롤백 전략: 임시 파일에 체크섬 기록 후 실패 시 자동 삭제, 기존 non-stream 방식 feature flag 유지.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Sidekiq Job 연동",
            "description": "파일 처리·검증을 백그라운드 Job으로 분리하여 UI 응답성을 확보한다.",
            "dependencies": [
              5
            ],
            "details": "위험 요소: Job 재시도 폭주, Queue 병목.\n롤백 전략: 중단 스크립트로 큐 비우기, Sidekiq 전용 Redis를 롤백 시 분리 해제.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "오류 처리 및 사용자 피드백",
            "description": "프론트/백엔드에서 발생한 오류를 캡처해 사용자에게 명확한 메시지와 재시도 옵션을 제공한다.",
            "dependencies": [
              6
            ],
            "details": "위험 요소: 민감 정보 노출, 과도한 알림.\n롤백 전략: Sentry 알림 레벨 조정, UI 알림 컴포넌트 토글 가능.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "통합 테스트·부하 테스트",
            "description": "RSpec, Capybara, JMeter 등을 사용해 end-to-end 시나리오와 300MB 다중 동시 업로드 부하를 검증한다.",
            "dependencies": [
              7
            ],
            "details": "위험 요소: 테스트 환경 리소스 부족, 가짜 양식 데이터 유출.\n롤백 전략: 테스트용 S3 버킷 격리, 실패 시 이전 태그로 재배포 후 테스트 시나리오 수정.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "1·2단계: 전처리 및 AI 기반 파싱 파이프라인",
        "description": "대용량 텍스트를 규정 구조(판·장·규정·조·항)로 분할하고 GPT-4/Claude로 분류한다.",
        "details": "Pseudo-code:\n```ruby\nFile.foreach(path, chomp: true) do |line|\n  line = normalize_korean_numbers(line)  # 제Ⅰ조 → 제1조\n  buffer << line\n  if section_boundary?(line)\n    sections << buffer.join(\"\\n\"); buffer.clear\n  end\nend\nsections.each_slice(BATCH_SIZE) do |chunk|\n  prompt = build_prompt(chunk)\n  resp = Ai::Client.chat(prompt)\n  parsed_json = JSON.parse(resp)\n  store_intermediate(parsed_json)\nend\n```\n핵심 구현:\n- 숫자·한글 혼합 패턴 정규식 `/(제\\d+조)|(\\(\\d+\\))|([가-하]\\.)/`\n- 95% 정확도 목표로 Few-shot 예시 포함 프롬프트 작성\n- 로컬 LLM fallback(`Ollama`) 시 `ENV['USE_LOCAL_LLM']` 로 분기",
        "testStrategy": "- 100라인 샘플에 대해 기대 JSON 구조 수동 비교\n- 실패율>5% 시 로그 분석 후 리트라이\n- 파싱 예외 발생 시 original 위치 기록, Rollback 확인\n- 단위 테스트: `section_boundary?`, `normalize_korean_numbers`",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "문장·라인 정규화 유틸 작성",
            "description": "입력 텍스트의 유니코드 정규화(NFKC), 공백·개행·특수문자 통합 정리, 이스케이프 시퀀스 제거 기능 모듈화",
            "dependencies": [],
            "details": "성능 목표: 10K 라인/초 이상 처리, 메모리 100MB 이하 유지. 장애 대응: 입력 인코딩 오류 시 자동 재시도 및 로그 남기고 손상 라인 격리.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "구획(section) 경계 판정 함수 구현",
            "description": "정규화된 텍스트에서 제목 패턴, 번호 체계, 마크다운 헤더 등을 기반으로 섹션 시작·끝 인덱스 탐지 함수 개발",
            "dependencies": [
              1
            ],
            "details": "정확도 목표: F1 ≥ 0.92(수동 라벨 200샘플 기준). 장애 대응: 패턴 매칭 실패 시 휴리스틱 백업 룰 집합 사용.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "배치 분할 로직(BATCH_SIZE) 설계",
            "description": "LLM 토큰 한도 및 처리량 최적화를 위해 섹션/문단 단위로 배치 크기 동적 산정 알고리즘 구현",
            "dependencies": [
              1,
              2
            ],
            "details": "성능 목표: 평균 배치 충진율 85% 이상, 초과 토큰 오류 0건. 장애 대응: 토큰 초과 탐지 시 자동 재분할 후 재큐잉.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "프롬프트 템플릿 및 Few-shot 예시 작성",
            "description": "모델 유형별(system/user) 프롬프트 구조 설계 및 대표 섹션 입력-출력 예시 5개 구축",
            "dependencies": [
              2,
              3
            ],
            "details": "성능 목표: 샘플 기준 정확도 ≥ 95%, 프롬프트 길이 1K 토큰 이하. 장애 대응: 출력 JSON 포맷 어긋나면 지시 강화 메시지 동적 삽입.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "AI 클라이언트 통신 래퍼 구현",
            "description": "OpenAI, Claude, Ollama 3종 API 공통 인터페이스 및 순차/병렬 폴백 로직 구현",
            "dependencies": [
              4
            ],
            "details": "가용성 목표: 성공 호출 비율 99.5%, 지연 5초 이하. 장애 대응: API 오류 시 백오프 재시도→다른 모델로 폴백→캐시 사용.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "응답 JSON 파싱 및 오류 핸들링",
            "description": "LLM 응답을 스키마 검증 후 파싱, 포맷 불일치·partial completion 복구 로직 포함",
            "dependencies": [
              5
            ],
            "details": "정합성 목표: 파싱 실패율 0.5% 이하. 장애 대응: JSON repair 알고리즘 적용 후 미복구 시 재호출 트리거.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "중간 결과 저장 스키마 설계",
            "description": "배치 단위 입력, 원시 응답, 파싱 결과, 메타데이터를 저장할 DB/파일 스키마 정의",
            "dependencies": [
              6
            ],
            "details": "확장성 목표: 1TB 데이터 지원, 쿼리 50ms 이하. 장애 대응: 데이터 손상 대비 버전 관리+스냅샷 백업.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "재시도·로깅·모니터링 체계",
            "description": "API 호출, 파싱, 저장 등 전 단계에 대해 재시도, 로그 수집, Grafana 대시보드 구성",
            "dependencies": [
              5,
              6
            ],
            "details": "신뢰성 목표: 오류 탐지→알람 ≤30초. 장애 대응: 임계치 초과 시 자동 스케일 아웃 및 관리자 알림.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "단위 및 통합 테스트",
            "description": "각 모듈별 pytest 단위 테스트와 전체 파이프라인 통합 시나리오 테스트 작성",
            "dependencies": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8
            ],
            "details": "품질 목표: 커버리지 90% 이상, CI 파이프라인 10분 내 완료. 장애 대응: 실패 시 자동 롤백·이슈 생성.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "3·4단계: JSON 중간형식 검증 및 수동 검수 UI",
        "description": "AI 파싱 결과를 JSON으로 저장하고 오류 검출·수정 인터페이스를 제공한다.",
        "details": "1) IntermediateRecord(model) : data:jsonb, status(enum: pending/approved/rejected), error_messages\n2) JSON Schema(validation) 정의 후 `json_schemer` 젬으로 검증\n3) 오류시 diff 뷰 제공(React On Rails or Stimulus) → 수정 후 저장\n4) 승인된 레코드만 다음 단계로 Job enqueue\n5) UI: `/admin/intermediates/:id`에서 트리 구조 렌더링",
        "testStrategy": "- 의도적 오류 JSON 업로드 → 검증 fail 확인\n- approve 후 status 변경 & Job 발생 여부 테스트\n- 1,000레코드 batch validate 시간 측정(≤2분)\n- UI에서 수정 → 재검증 → 통과 루프 확인",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "IntermediateRecord 모델·enum 정의",
            "description": "JSON 데이터 임시 보관 및 상태 추적을 위해 IntermediateRecord ActiveRecord 모델과 상태·오류 타입 enum을 설계한다.",
            "dependencies": [],
            "details": "DB 테이블 생성, attributes: payload(jsonb), status(enum: draft|validated|approved|rejected), error_summary(jsonb)\nREST: POST /intermediate_records, GET /intermediate_records/:id\nUI State: 신규 업로드 → ‘초안’ 표시",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "JSON Schema 작성 및 json_schemer 통합",
            "description": "업로드 JSON에 대한 형식·비즈니스 규칙을 명세하는 Schema를 작성하고 gem 'json_schemer'로 검증 파이프라인에 연결한다.",
            "dependencies": [
              1
            ],
            "details": "schema 파일: config/schemas/intermediate_record.json\n검증 메서드: IntermediateRecord#validate_schema!\nUI State: ‘검증 중’ 스피너",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "서버 사이드 검증 서비스 구현",
            "description": "Schema 검증 및 추가 비즈니스 로직을 수행하는 Service Object를 작성하고 API 엔드포인트로 노출한다.",
            "dependencies": [
              2
            ],
            "details": "Service: ValidateIntermediateRecord.call(record)\nAPI: POST /intermediate_records/:id/validate → returns {valid, errors}\nUI State: ‘검증 완료’ 혹은 ‘오류 있음’ 뱃지",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "오류 diff 알고리즘 및 표시 로직",
            "description": "기존 오류와 신규 오류를 비교해 변경점만 하이라이트하고, 프런트로 diff 데이터를 전달한다.",
            "dependencies": [
              3
            ],
            "details": "Algorithm: Hash diff by JSON path, classify as added/removed/unchanged\nAPI: GET /intermediate_records/:id/errors_diff?since=<timestamp>\nUI State: 오류 라인에 색상(diff) 적용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "React/Stimulus 프런트엔드 컴포넌트",
            "description": "검증 결과를 시각화하고 수정 제안을 입력받는 컴포넌트를 React(데이터 그리드) + Stimulus(터보 프레임)로 제작한다.",
            "dependencies": [
              4
            ],
            "details": "Components: <JsonViewer>, <ErrorPanel>, <ApproveRejectButtons>\nState flow: idle → loading → validated → editing → ready_for_decision",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "승인/반려 플로우 및 Job enqueue",
            "description": "UI에서 승인/반려 트리거 시 상태 변경과 후속 Job(enqueue) 로직을 구현한다.",
            "dependencies": [
              5
            ],
            "details": "API: POST /intermediate_records/:id/approve, POST /intermediate_records/:id/reject\nBackground Job: ProcessApprovedRecordJob\nUI State: validated → approved|rejected → processed",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "성능 최적화(batch validate)",
            "description": "여러 Records를 한번에 검증하는 배치 엔드포인트와 큐 작업을 추가해 처리량을 개선한다.",
            "dependencies": [
              3
            ],
            "details": "API: POST /intermediate_records/batch_validate {ids:[]}\nJob: BatchValidateJob → streams progress via ActionCable\nUI State: 리스트 뷰에 진행률 프로그레스바",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "E2E 테스트 및 QA 시나리오",
            "description": "Cypress로 업로드→검증→승인/반려 전 과정을 자동화 테스트하고 QA 체크리스트를 작성한다.",
            "dependencies": [
              6,
              7
            ],
            "details": "Tests: cypress/integration/intermediate_record_flow.spec.js\nQA 문서: Confluence ‘JSON 검증 UI QA’ 페이지\nUI State 시퀀스 검증",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "5단계: 일괄 DB Import & 관계 매핑",
        "description": "승인된 JSON을 Edition→Clause 까지 INSERT, 중복 방지 및 트랜잭션 롤백 지원",
        "details": "1) `ImportService.import!(json)` 내부 트랜잭션:\n```ruby\nActiveRecord::Base.transaction do\n  ed = Edition.find_or_create_by!(number: json[\"edition\"].to_i)\n  ...\nend\n```\n2) `find_or_create_by` + `sort_order` 컬럼으로 idempotent 보장\n3) 성능 최적화를 위해 `insert_all`(Rails 8) 사용, 1,000 record batch\n4) 실패 시 `raise ActiveRecord::Rollback` 후 Intermediate 상태 reverted",
        "testStrategy": "- 동일 JSON 두 번 Import → row count 증가 없음 확인\n- 랜덤 장애 시트(외래키 누락) → 전체 롤백 확인\n- 전체 6판 데이터 Import 시간 ≤10분 측정\n- 샘플 데이터 UI에서 계층 탐색 검사",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "트랜잭션 기반 ImportService 설계",
            "description": "JSON 일괄 Import 처리를 단일 DB 트랜잭션으로 묶어 원자성 보장 및 장애 복구 용이성을 확보한다.",
            "dependencies": [],
            "details": "• 핵심 클래스 다이어그램 및 트랜잭션 경계 정의\n• 로그 포맷: {\"ts\":\"ISO8601\",\"lvl\":\"INFO\",\"svc\":\"ImportService\",\"tx_id\":\"UUID\",\"stage\":\"begin|commit|rollback\"}\n• 모니터링 지표: import_tx_total, import_tx_failed_total, import_tx_duration_seconds",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "find_or_create_by & idempotency 전략",
            "description": "중복 실행 시에도 데이터가 단일 상태에 도달하도록 멱등성 로직을 구현한다.",
            "dependencies": [
              1
            ],
            "details": "• unique 키 기준 find_or_create_by 래퍼 작성\n• 요청 해시 기반 실행 이력 테이블 설계\n• 로그 포맷: {\"ts\",\"lvl\",\"svc\":\"Idempotency\",\"tx_id\",\"hash\",\"action\":\"hit|miss\"}\n• 지표: idempotency_hit_total, idempotency_miss_total",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "insert_all 배치 성능 최적화",
            "description": "ActiveRecord insert_all 사용 시 Batch Size, DB 파라미터 튜닝으로 Throughput을 극대화한다.",
            "dependencies": [
              1,
              2
            ],
            "details": "• 배치 크기 실험(1k/5k/10k) 후 최적값 선정\n• prepared statements & Copy API 비교\n• 로그 포맷: {\"ts\",\"lvl\",\"svc\":\"BatchInsert\",\"batch_no\",\"rows\",\"duration_ms\"}\n• 지표: batch_insert_throughput_rows_per_sec, batch_insert_error_total",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "중복·무결성 검증 로직",
            "description": "Import 대상 레코드의 존재 여부, FK 유효성, 비즈니스 규칙 위반을 사전·사후 검증한다.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "• Pre-import DISTINCT 체크, Post-import COUNT 비교\n• DB 제약조건 + 애플리케이션 층 검증 병행\n• 로그 포맷: {\"ts\",\"lvl\",\"svc\":\"Validation\",\"record_id\",\"error_code\",\"msg\"}\n• 지표: validation_failed_total, duplicate_detected_total",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "오류 발생 시 롤백 및 Intermediate 상태 관리",
            "description": "부분 실패 시 전체 트랜잭션 롤백 및 임시 테이블/상태 플래그로 재시도 가능 구조를 설계한다.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "• SAVEPOINT 활용 단계별 롤백\n• 실패 레코드 이동용 intermediate 테이블 정의\n• 로그 포맷: {\"ts\",\"lvl\",\"svc\":\"Rollback\",\"tx_id\",\"stage\",\"failed_rows\"}\n• 지표: rollback_executed_total, intermediate_records_total",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "대용량 데이터 벤치마크 및 인덱스 튜닝",
            "description": "수백만 레코드 대상 성능 측정 후 인덱스·VACUUM·ANALYZE 전략으로 DB 부하를 최적화한다.",
            "dependencies": [
              1,
              3,
              4,
              5
            ],
            "details": "• pg_stat_statements 기반 쿼리 프로파일링\n• 인덱스 후보군 및 Fillfactor 조정\n• 로그 포맷: {\"ts\",\"lvl\",\"svc\":\"Benchmark\",\"rows\",\"duration_s\",\"cpu\",\"io\"}\n• 지표: import_throughput_rows_per_sec, index_hit_ratio, db_cpu_usage_percent",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "통합 테스트 및 롤백 시나리오 검증",
            "description": "모든 예외 경로(중복, 제약 오류, 장애) 에 대한 E2E 테스트와 로그·지표 알람을 검증한다.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "details": "• RSpec + FactoryBot으로 대량 Fixture 생성\n• chaos engineering 도구로 장애 주입 후 rollback 확인\n• 로그 포맷: {\"ts\",\"lvl\":\"TEST\",\"case_id\",\"result\"}\n• 지표: test_pass_total, test_fail_total, rollback_success_rate",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "규정 조회 UI 및 PostgreSQL 전체 텍스트 검색",
        "description": "End User용 목록/상세 페이지와 기본 키워드 검색 기능을 구현한다.",
        "details": "1) `/regulations` public 컨트롤러: edition/chapter/regulation Bread-Crumb\n2) `pg_search` 젬으로 Article, Clause 텍스트 인덱스 생성:\n   ```ruby\n   include PgSearch::Model\n   pg_search_scope :search_text, against: [:title, :content], using: {tsearch: {prefix: true}}\n   ```\n3) 검색 결과 페이지에 하이라이트 표시, 페이지네이션(Kaminari)\n4) Hotwire Stream으로 무한 스크롤 지원",
        "testStrategy": "- 키워드 \"등록\", \"휴학\" 등 검색 시 기대 결과 상위 노출\n- explain analyze 로 쿼리 계획 확인, 응답 < 500ms\n- 모바일 뷰에서 브라우징·하이라이트 정상 동작 확인",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Public 컨트롤러∙라우팅 설계",
            "description": "규정 조회 전용 public 네임스페이스 컨트롤러와 RESTful 라우팅을 설계하여 URL 구조를 표준화합니다.",
            "dependencies": [],
            "details": "UX 요구사항: • URL이 짧고 의미가 명확해야 하며, 직접 입력·공유가 쉬워야 합니다. 성공 기준: • Swagger 또는 RSpec 요청 테스트 기준 100% 통과, • 사용자는 /rules, /rules/:id 경로로 문제없이 접근 가능.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Bread-Crumb 네비게이션 컴포넌트",
            "description": "계층형 규정 구조를 시각적으로 안내하는 빵조각 네비게이션 UI를 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "UX 요구사항: • 한눈에 현재 위치를 파악하고 상위 규정으로 빠르게 이동할 수 있어야 합니다. 성공 기준: • Lighthouse 접근성 점수 90점 이상, • 클릭당 평균 이동 시간 200ms 이하.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "pg_search 인덱스 및 scope 구현",
            "description": "PostgreSQL full-text search를 위해 pg_search로 다국어지원 인덱스를 생성하고 모델 scope를 정의합니다.",
            "dependencies": [
              1
            ],
            "details": "UX 요구사항: • 검색어 입력 후 1초 이내 결과 반환. 성공 기준: • 10만 건 데이터 기준 쿼리 평균 응답 300ms 이하, • RSpec 검색 정확도 테스트 95% 이상 통과.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "검색 결과 하이라이트 로직",
            "description": "매칭된 키워드를 결과 리스트와 상세 페이지에서 강조 표시하는 서버·클라이언트 공통 로직을 작성합니다.",
            "dependencies": [
              3
            ],
            "details": "UX 요구사항: • 키워드가 색상 대비 4.5:1 이상으로 표시되어야 함. 성공 기준: • 정규식 오탐률 1% 미만, • a11y 테스트 통과.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "무한 스크롤 Hotwire Stream",
            "description": "검색 결과를 Hotwire Turbo Stream으로 무한 스크롤 방식으로 렌더링하여 페이지 새로고침 없이 추가 로드합니다.",
            "dependencies": [
              3,
              4
            ],
            "details": "UX 요구사항: • 스크롤 지연 없이 300px 이전에 프리페치, 로딩 스피너 500ms 이상 지속 금지. 성공 기준: • TTI(Time-to-Interactive) 4초 이하, • 스크롤 중 프레임 드롭 5% 미만.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "페이지네이션 및 성능 튜닝",
            "description": "API와 DB 레이어에서 커서 기반 페이지네이션 추가 및 쿼리 캐시, 인덱스 힌트 등을 적용해 성능을 최적화합니다.",
            "dependencies": [
              3,
              5
            ],
            "details": "UX 요구사항: • 첫 페이지 로드 800ms 이하 유지. 성공 기준: • p75 응답 시간 400ms 이하, • NewRelic APM 오류율 1% 미만.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "모바일 반응형 스타일링",
            "description": "Tailwind 기반으로 모바일 뷰포트(≤768px)에 최적화된 규정 리스트·상세·검색 UI를 스타일링합니다.",
            "dependencies": [
              2,
              5
            ],
            "details": "UX 요구사항: • 터치 타겟 44px 이상, • 폰트 가독성 16px 이상. 성공 기준: • Google Lighthouse 모바일 점수 90점 이상, • 실제 기기 테스트 5종 모두 레이아웃 깨짐 없음.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "쿼리 분석·부하 테스트",
            "description": "pg_stat_statements와 k6로 실사용 시나리오 부하를 주고 병목 쿼리를 분석·개선합니다.",
            "dependencies": [
              3,
              5,
              6
            ],
            "details": "UX 요구사항: • 동시 사용자 1,000명까지 성능 저하 체감 없어야 함. 성공 기준: • TPS 300 이상 유지, • 95th percentile 응답 500ms 이하, • CPU 사용률 70% 이하.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "임베딩 생성 및 pgvector 유사도 검색",
        "description": "OpenAI text-embedding-3-small로 Article 임베딩 생성, pgvector 코사인 유사도 검색 구현",
        "details": "1) `EmbeddingJob` 배치: Article.where(embedding:nil).find_each(batch_size:100)\n2) OpenAI API 호출 예:\n```ruby\nresp = client.embeddings(parameters: {model:\"text-embedding-3-small\", input: article.full_context})\narticle.update!(embedding: resp[\"data\"][0][\"embedding\"], embedding_updated_at: Time.current)\n```\n3) 인덱스: `CREATE INDEX idx_articles_embedding ON articles USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);`\n4) 검색 서비스:\n```sql\nSELECT id, 1 - (embedding <=> query_vec) AS score\nFROM articles\nORDER BY score DESC LIMIT 20;\n```\n5) 캐싱: Redis.setex(\"emb:#{article.id}\",24h,embedding)",
        "testStrategy": "- 10개 기사 임베딩 길이=1536 확인\n- 임베딩 업데이트 이후 재요청 skip 로직 검증\n- 벤치마크: 1,000 쿼리 평균 < 200ms\n- 실패/타임아웃 시 지수 backoff 재시도",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Article 스코프 정의 및 배치 전략 수립",
            "description": "임베딩 대상 Article 범위와 배치 주기를 결정하여 리소스 사용량을 예측하고 후속 단계의 입력 크기를 한정한다.",
            "dependencies": [],
            "details": "SLA: 스코프 정의 완료 후 1일 내 문서 누락률 0.5% 이하, 배치 주기(예: 5분) 정확도 99%.\n알람: 누락률 0.5% 초과 시 PagerDuty 경고, 배치 지연 2주기 연속 발생 시 Critical.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "OpenAI 임베딩 API 래퍼 구현 및 백오프 로직",
            "description": "API 호출 모듈을 작성하고 429/5xx 오류 시 지수 백오프 및 재시도 정책을 적용한다.",
            "dependencies": [
              1
            ],
            "details": "SLA: 평균 호출 지연 800 ms 이하, 성공률 99.5%.\n알람: 1분 평균 오류율 0.5% 초과 시 Warning, 2% 초과 시 Critical.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "embedding 컬럼 업데이트 및 timestamp 관리",
            "description": "DB에 embedding 벡터를 저장·갱신하고 updated_at 컬럼으로 증분 처리한다.",
            "dependencies": [
              2
            ],
            "details": "SLA: 트랜잭션 성공률 99.9%, 레이지(지연) 업데이트 10 분 이내.\n알람: 업데이트 실패 0.1% 초과 시 Warning, 1% 초과 시 Critical.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "pgvector 인덱스 생성 및 파라미터 튜닝",
            "description": "벡터 길이와 HNSW 파라미터(M, ef_construction 등)를 조정하여 검색 속도를 최적화한다.",
            "dependencies": [
              3
            ],
            "details": "SLA: k=10 유사도 쿼리 P95 100 ms 이하.\n알람: P95 150 ms 초과 시 Warning, 300 ms 초과 시 Critical.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "유사도 검색 SQL 래퍼 서비스 개발",
            "description": "REST/gRPC 인터페이스로 유사도 검색을 제공하고 결과를 정규화한다.",
            "dependencies": [
              4
            ],
            "details": "SLA: API P95 120 ms 이하, 가용성 99.9%.\n알람: 5분 동안 에러율 1% 초과 시 Warning, 5% 초과 시 Critical.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Redis 캐싱 전략 설계 및 구현",
            "description": "자주 호출되는 쿼리 결과를 Redis에 TTL 기반으로 캐싱하여 레이턴시를 줄인다.",
            "dependencies": [
              5
            ],
            "details": "SLA: 캐시 히트율 80% 이상, P95 30 ms 이하.\n알람: 히트율 70% 미만 15분 지속 시 Warning, 50% 미만 5분 지속 시 Critical.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "성능 벤치마크 및 모니터링 대시보드 구축",
            "description": "Grafana/Prometheus로 전체 파이프라인 지표를 시각화하고 부하 테스트로 용량을 검증한다.",
            "dependencies": [
              6
            ],
            "details": "SLA: 대시보드 지표 갱신 지연 1분 이하, 벤치마크 리포트 2일 내 완성.\n알람: 모니터링 수집 누락 5% 초과 시 Warning, 20% 초과 시 Critical.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "오류 처리 및 재시도 정책 테스트",
            "description": "의도적인 장애 시나리오(네트워크 단절, API 한도 초과 등)를 주입하여 복구 시간을 검증한다.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            "details": "SLA: 장애 복구(자동 재시도 포함) 평균 60 초 이하, 데이터 손실 0건.\n알람: 복구 시간 120 초 초과 시 Critical, 손실 데이터 감지 시 Immediate Critical.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "RAG 기반 대화형 챗 인터페이스",
        "description": "Hotwire Turbo 기반 챗 UI와 GPT-4 응답 생성, 출처 인용을 결합한다.",
        "details": "1) Conversation, Message 모델 CRUD + session cookie에 conversation_id 저장\n2) ChatController#create:\n```ruby\ncontext = VectorSearch.find_top_k(question, k:4)\nanswer = Ai::Client.chat(build_rag_prompt(question, context))\nMessage.create!(conversation:conv, role:\"assistant\", content:answer, sources:context.ids)\nTurbo::StreamsChannel.broadcast_append_to conv, partial:\"messages/message\", locals:{message:answer}\n```\n3) 답변 내 `[1]` 형식 인용 → Regulation 링크 매핑 렌더링\n4) 캐싱: same question 해시 → 12h Redis\n5) 세션 만료: cron `Conversation.where(\"last_message_at < ?\",7.days.ago).delete_all`",
        "testStrategy": "- 질문 \"성적 포기 가능한가?\" → AI 응답과 출처 4건 표시\n- 브라우저 새로고침 후 대화 기록 유지 확인\n- 동일 질문 2회시 캐시 hit 확인(응답 < 500ms)\n- 50 concurrent WebSocket 연결 부하 테스트, 오류율 <1%",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Conversation·Message 모델 및 스키마 설계",
            "description": "대화 및 메시지 데이터를 저장할 관계형/NoSQL 스키마 정의",
            "dependencies": [],
            "details": "- 보안: PII 최소화 및 암호화 필드 지정\n- 성능: 인덱스 설계로 CRUD < 50 ms 보장\n- UX: 메시지 정렬·조회 테스트 통과",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "세션 기반 대화 상태 관리",
            "description": "사용자 세션별 컨텍스트·토큰 관리 로직 구현",
            "dependencies": [
              1
            ],
            "details": "- 보안: 세션 토큰 HMAC 서명·만료 30 분\n- 성능: 상태 조회 95% < 10 ms\n- UX: 다중 탭 동기화 오차 ≤ 1 s",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "VectorSearch 서비스와 상위 k 문맥 추출",
            "description": "임베딩 저장·검색 및 상위 k 문서 반환",
            "dependencies": [
              1
            ],
            "details": "- 보안: 인덱스 접근 제어 RBAC 적용\n- 성능: k=5 검색 지연 95% < 200 ms\n- UX: 관련도 ≥ 0.8 BLEU 기준 확인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "RAG 프롬프트 생성 로직",
            "description": "문맥, 질문, 시스템 메시지를 결합해 프롬프트 구성",
            "dependencies": [
              3
            ],
            "details": "- 보안: 프롬프트 탈민감화 필터 적용\n- 성능: 프롬프트 길이 8k 토큰 이하 검증\n- UX: 응답 일관성 80% 만족 설문",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "GPT-4 호출 래퍼 및 타임아웃 처리",
            "description": "OpenAI API 호출, 재시도·타임아웃 및 오류 핸들링",
            "dependencies": [
              4
            ],
            "details": "- 보안: API 키 암호화·키 회전 로직\n- 성능: 98% 응답 < 30 s, 타임아웃 35 s\n- UX: 실패 시 친화적 메시지 반환",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "메시지 저장·방송(Turbo Stream)",
            "description": "서버→클라이언트 실시간 스트림 및 DB 영속화",
            "dependencies": [
              1,
              5
            ],
            "details": "- 보안: CSRF/WebSocket 토큰 검증\n- 성능: 1k 동시 접속 지연 < 150 ms\n- UX: 지연 없는 타이핑 효과 렌더링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "출처 인용 파싱 및 렌더링",
            "description": "모델 응답의 citation 태그를 추출·링크화",
            "dependencies": [
              5
            ],
            "details": "- 보안: XSS 방지 HTML sanitizer 적용\n- 성능: 렌더링 FPS 60 유지\n- UX: 클릭 시 원문 모달 100 ms 이하",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "동일 질문 캐시 및 만료 전략",
            "description": "질문·프롬프트 해시 기반 결과 캐싱",
            "dependencies": [
              2,
              3,
              5
            ],
            "details": "- 보안: 캐시 내 PII 제거\n- 성능: 캐시 hit 시 90% 응답 < 300 ms\n- UX: 캐시 만료 후 최신 정보 표시",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "WebSocket 부하 테스트·스케일링",
            "description": "k6 등으로 부하 테스트 및 Horizontal Pod Autoscaling",
            "dependencies": [
              6
            ],
            "details": "- 보안: DoS 탐지 임계값 설정\n- 성능: 10k 동접에서 p95 지연 < 250 ms\n- UX: 테스트 중 끊김 없는 스트림 확인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "개인정보 보호 및 로그 익명화",
            "description": "로그·분석 데이터에서 개인정보 제거·가명화",
            "dependencies": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9
            ],
            "details": "- 보안: GDPR/한국개인정보법 준수 감사 체크리스트\n- 성능: 익명화 처리 오버헤드 < 5%\n- UX: 사용자 데이터 삭제 요청 24 h 내 처리",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-06T03:34:14.097Z",
      "updated": "2025-07-06T03:34:14.097Z",
      "description": "Tasks for master context"
    }
  }
}