{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Execute Full Test Suite and Validation",
        "description": "Run all 466 test cases to verify system functionality and identify failing tests",
        "details": "- Execute bundle exec rspec in Docker environment\n- Identify and analyze failing test cases\n- Check test coverage\n- Run performance tests\n- Execute security tests with Brakeman",
        "testStrategy": "1. Run docker-compose exec web bundle exec rspec\n2. Verify all tests pass\n3. Analyze failure logs if any\n4. Run bundle exec brakeman security check",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Docker 테스트 환경 준비",
            "description": "RSpec 실행을 위한 Docker 이미지 빌드 및 컨테이너 기동, 의존성 설치와 테스트 DB 세팅을 수행한다.",
            "dependencies": [],
            "details": "- docker-compose build && docker-compose up -d\n- docker-compose exec web bundle install\n- docker-compose exec web bundle exec rails db:setup RAILS_ENV=test\n- 필요한 환경 변수(.env.test) 설정 및 확인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "전체 RSpec 스위트 실행 및 기본 결과 수집",
            "description": "466개 전 테스트 케이스를 실행하여 JUnit·JSON 형식 결과 파일을 생성하고 종료 코드를 기록한다.",
            "dependencies": [
              1
            ],
            "details": "- docker-compose exec web bundle exec rspec --format documentation \\\n  --format RspecJunitFormatter --out tmp/rspec.xml \\\n  --format json --out tmp/rspec.json\n- 실패 여부를 종료 코드로 반환하고 아티팩트(tmp/rspec.xml, tmp/rspec.json) 보존",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "실패 케이스 자동 로깅 및 원인 분석",
            "description": "JSON 결과를 파싱하여 실패 테스트를 추출하고 로그·스택트레이스를 분석해 원인을 분류한다.",
            "dependencies": [
              2
            ],
            "details": "- jq 로 tmp/rspec.json 중 failures 배열 파싱\n- 각 실패 spec 파일의 최근 로그 tail -n 100 저장\n- pry-rescue 또는 rubocop 분석으로 오류 유형(코드 오류, 환경 문제 등) 분류\n- reports/failures.md 에 테스트명·에러 메시지·원인·재현 방법 정리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "커버리지·성능·Brakeman 보안 검사 실행",
            "description": "SimpleCov로 커버리지 측정, rack-mini-profiler 기반 성능 벤치마크, Brakeman 스캔을 수행한다.",
            "dependencies": [
              2
            ],
            "details": "- docker-compose exec web COVERAGE=true bundle exec rspec\n- coverage/index.html 결과 저장\n- docker-compose exec web ruby perf/benchmark.rb 실행 후 reports/perf.json 저장\n- docker-compose exec web bundle exec brakeman -o reports/brakeman.json",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "최종 테스트 및 분석 결과 리포트 작성",
            "description": "실패 분석·커버리지·성능·보안 결과를 통합해 Markdown/PDF 보고서를 작성하고 팀에 공유한다.",
            "dependencies": [
              3,
              4
            ],
            "details": "- coverage%, 실패 원인 요약, 성능 지표, Brakeman 경고를 summary.md 로 통합\n- pandoc summary.md -o summary.pdf 로 PDF 변환\n- Slack/이메일에 summary.pdf, 링크(HTML coverage) 공유 및 회의 일정 공지",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "AI API Integration Status Check",
        "description": "Verify OpenAI, Anthropic, Google API key setup and connectivity",
        "details": "- Validate API keys in .env.development\n- Test connection to each AI service\n- Test embedding generation\n- Verify RAG system operation\n- Test error handling and fallback mechanisms",
        "testStrategy": "1. Test each AI service connection in Rails console\n2. Test embedding generation API calls\n3. Test chat response generation\n4. Verify API limits and error handling",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API 키 유효성 검증",
            "description": ".env.development 파일의 OpenAI·Anthropic·Google API 키 존재 여부 및 형식 검증",
            "dependencies": [],
            "details": "1) .env.development 로드\n2) 각 서비스 키 존재 확인\n3) 정규식으로 형식 검증\n4) 누락·오류 시 경고 로그 출력",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "API 연결 상태 테스트",
            "description": "각 서비스의 인증 토큰으로 기본 엔드포인트 호출하여 연결 가능 여부 확인",
            "dependencies": [
              1
            ],
            "details": "1) OpenAI models.list 호출\n2) Anthropic /models 호출\n3) Google VertexAI 모델 목록 호출\n4) HTTP 상태 코드·지연 시간 기록",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "임베딩 생성 호출 테스트",
            "description": "세 서비스에서 동일 입력으로 임베딩 생성 API 호출 및 결과 구조 검증",
            "dependencies": [
              2
            ],
            "details": "1) 테스트 문장 준비\n2) 각 서비스 임베딩 엔드포인트 호출\n3) 벡터 길이·유형 비교\n4) DB 저장 가능 여부 점검",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "채팅/완성 API 호출 테스트",
            "description": "대화 시나리오로 ChatCompletion(또는 유사) API 응답 검증",
            "dependencies": [
              2
            ],
            "details": "1) 시스템·유저 프롬프트 정의\n2) 각 서비스에 대화 호출\n3) 응답 시간·콘텐츠 유효성 확인\n4) 다국어 처리 여부 점검",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "에러 핸들링 시나리오 검증",
            "description": "잘못된 키·시간 초과·네트워크 오류 등 시나리오로 예외 처리 로직 테스트",
            "dependencies": [
              3,
              4
            ],
            "details": "1) 잘못된 키 주입\n2) 인위적 타임아웃 설정\n3) 네트워크 차단 모의\n4) 예외 메시지·폴백 로직 기록",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "레이트 리밋·폴백 및 로깅 검증",
            "description": "동시 요청 폭주 상황에서 레이트 리밋 대응과 폴백 전략 작동 여부 확인",
            "dependencies": [
              5
            ],
            "details": "1) JMeter 등으로 다중 요청 생성\n2) 429 응답 발생 확인\n3) 재시도·백오프 로직 검증\n4) 로그 및 모니터링 지표 확인",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Regulation Data Parsing and Import Verification",
        "description": "Test RegulationParser with actual regulation data and database storage",
        "details": "- Parse regulations9-340-20250702.txt file\n- Verify parsing accuracy\n- Check database storage process\n- Generate embeddings and build vector index\n- Optimize parsing performance and memory usage",
        "testStrategy": "1. Run rails regulation_import:parse\n2. Check parsing result statistics\n3. Verify data stored in database\n4. Check embedding generation status",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "환경 준비 및 입력 데이터 확보",
            "description": "규제 데이터 처리를 위한 개발·테스트 환경을 구성하고 원본 파일을 확보한다.",
            "dependencies": [],
            "details": "Docker 컨테이너 실행, 필요한 gem 및 라이브러리 설치, regulations9-340-20250702.txt 파일을 data/raw 경로에 배치한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "규제 데이터 파일 파싱 모듈 구현",
            "description": "텍스트 파일을 레코드 단위로 분리하고 메타데이터를 구조화하는 파서를 개발한다.",
            "dependencies": [
              1
            ],
            "details": "Rails task regulation_import:parse 내 Parser 클래스를 구현하고 유닛 테스트 추가.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "DB 스키마 설계 및 파싱 데이터 적재",
            "description": "파싱된 데이터를 저장할 테이블을 설계하고 대용량 INSERT 로직을 구현한다.",
            "dependencies": [
              2
            ],
            "details": "regulations, regulation_sections 등 테이블 생성, bulk_insert 사용, 데이터 무결성 검증.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "규제 문서 임베딩 생성",
            "description": "DB에 저장된 텍스트를 AI API로 임베딩해 regulation_embeddings 테이블에 저장한다.",
            "dependencies": [
              3
            ],
            "details": "OpenAIEmbeddingService 호출, 배치 단위 처리, 실패 재시도 로직 포함.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "벡터 인덱스 빌드",
            "description": "생성된 임베딩을 사용해 검색용 벡터 인덱스를 구축한다.",
            "dependencies": [
              4
            ],
            "details": "pgvector 또는 FAISS 선택, 인덱스 생성 스크립트 작성, 유사도 검색 테스트.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "성능 및 메모리 최적화",
            "description": "파싱·임베딩·인덱싱 전체 파이프라인의 속도와 메모리 사용량을 최적화한다.",
            "dependencies": [
              2,
              3,
              4,
              5
            ],
            "details": "메모리 프로파일링, 스트리밍 파싱, 배치 크기 조정, 인덱스 파라미터 튜닝.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "검증 리포트 작성",
            "description": "정확도, 성능, 메모리 사용 결과를 종합하여 리포트를 작성하고 공유한다.",
            "dependencies": [
              5,
              6
            ],
            "details": "파싱 정확도 표, 처리 속도 그래프, before/after 메모리 비교, 개선 방안 제시.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Web Interface Functionality Verification",
        "description": "Test admin interface and user search UI functionality",
        "details": "- Test admin login/logout functionality\n- Check dashboard and embedding management pages\n- Test regulation search interface\n- Verify interactive chat UI\n- Check responsive design and accessibility",
        "testStrategy": "1. Access localhost:3000 in browser\n2. Test admin login\n3. Check functionality of each page\n4. Test search and chat features",
        "priority": "medium",
        "dependencies": [
          1,
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "관리자 로그인·대시보드 기능 검증",
            "description": "관리자 계정으로 로그인하고 대시보드의 핵심 정보를 정상적으로 조회할 수 있는지 확인한다.",
            "dependencies": [],
            "details": "1) /admin 로그인 페이지 접근\n2) 올바른·잘못된 자격 증명 시도\n3) 로그인 후 대시보드 위젯, 통계, 네비게이션 확인\n4) 로그아웃 및 세션 만료 동작 검증",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "임베딩 관리 페이지 검증",
            "description": "임베딩 목록 조회, 필터링, 재생성, 삭제 등 관리 기능을 테스트한다.",
            "dependencies": [
              1
            ],
            "details": "1) 관리자 메뉴에서 임베딩 관리 페이지 진입\n2) 임베딩 리스트·페이징·검색 확인\n3) 개별/배치 재생성 및 삭제 동작 검증\n4) 오류·권한 처리 확인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "규제 검색 UI 기능 검증",
            "description": "사용자 검색창을 통해 규제 데이터를 정확히 조회·표시하는지 검증한다.",
            "dependencies": [
              1
            ],
            "details": "1) 검색창 자동완성·검색어 하이라이트 확인\n2) 필터·정렬 옵션 동작 검증\n3) 검색 결과 페이지네이션 및 세부정보 뷰 확인\n4) 빈 결과·에러 처리 확인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "대화형 UI(챗봇) 기능 검증",
            "description": "규제 검색과 연동된 챗봇 인터페이스에서 질문·답변 흐름을 점검한다.",
            "dependencies": [
              1,
              3
            ],
            "details": "1) 채팅 창 열기 및 초기 메시지 로딩 확인\n2) 사용자 질문 입력·전송·로딩 인디케이터 확인\n3) 답변 내 링크·소스·관련 규제 연결 검증\n4) 연속 대화·컨텍스트 유지·오류 메시지 확인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "반응형·접근성 테스트",
            "description": "다양한 화면 크기와 보조기술 환경에서 UI가 접근성 지침을 준수하는지 확인한다.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "1) 모바일·태블릿·데스크톱 뷰포트에서 레이아웃 테스트\n2) 키보드 내비게이션·포커스 순서 확인\n3) 스크린리더로 레이블·ARIA 속성 검증\n4) 명암 대비·글꼴 크기 조정·미디어쿼리 동작 확인",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Vector Search Performance Optimization",
        "description": "Optimize pgvector-based search system performance",
        "details": "- Optimize pgvector index settings\n- Analyze search query performance\n- Optimize embedding batch processing\n- Implement caching strategy\n- Improve search response time",
        "testStrategy": "1. Run search performance benchmarks\n2. Analyze index usage\n3. Check query execution plans\n4. Measure and improve response times",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "pgvector 검색 벤치마킹 수행",
            "description": "현행 검색 시스템의 성능 지표를 수집하기 위해 pgvector 기반 벤치마킹을 실행한다.",
            "dependencies": [],
            "details": "• 공개 데이터셋 및 실제 쿼리 세트를 준비한다.\n• 동시 접속 수, 쿼리 길이, 유사도 임계값을 변수로 하여 테스트 스크립트를 작성한다.\n• TPS, 평균/최대 지연 시간, CPU·I/O 사용률을 측정한다.\n• 결과를 CSV 및 그래프로 저장한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "인덱스 파라미터 조정",
            "description": "벤치마킹 결과를 토대로 pgvector 인덱스의 파라미터를 최적화한다.",
            "dependencies": [
              1
            ],
            "details": "• HNSW, IVF_FLAT 등 인덱스 유형별로 m, ef_search, lists 값을 조정한다.\n• ALTER INDEX… SET (…); 및 REINDEX를 수행한다.\n• 각 설정마다 벤치마크를 재실행하여 성능 곡선을 확보한다.\n• 최적 파라미터를 결정하고 운영 DB에 반영한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "쿼리 플랜 분석",
            "description": "튜닝된 인덱스에서 쿼리 실행 계획을 분석해 병목 지점을 파악한다.",
            "dependencies": [
              2
            ],
            "details": "• 주요 검색 쿼리에 EXPLAIN (ANALYZE, BUFFERS)를 적용한다.\n• Seq Scan, Index Scan 비율 및 비용을 확인한다.\n• 느린 단계의 통계 정보 및 필터 조건을 점검한다.\n• 필요 시 ANALYZE, vacuum, 통계 수집 대상 열 조정 등을 수행한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "캐싱 전략 구현",
            "description": "검색 응답 속도를 향상시키기 위해 캐싱 레이어를 설계·구현한다.",
            "dependencies": [
              3
            ],
            "details": "• Redis 기반 LRU 캐시를 도입하여 쿼리 결과 및 임베딩을 저장한다.\n• 키 설계, 만료 정책, 동시성 제어 로직을 구현한다.\n• 미스율, 히트율을 모니터링하고 로그 대시보드를 구축한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "배치 임베딩 최적화",
            "description": "대량 문서 임베딩 처리 파이프라인의 성능을 개선한다.",
            "dependencies": [
              3
            ],
            "details": "• GPU/CPU 혼합 병렬 처리를 위한 마이크로배칭 기법을 적용한다.\n• Sidekiq 워커 수, 배치 크기, 큐 우선순위를 조정한다.\n• 처리 속도 및 메모리 사용량을 계측하고 병목을 제거한다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "결과 리포트 작성",
            "description": "모든 최적화 작업의 결과와 권고사항을 문서로 정리한다.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "• 성능 변화 그래프, 지표 표, 튜닝 전·후 비교를 포함한다.\n• 인덱스 설정, 캐시 구성, 임베딩 파이프라인 변경점 설명을 작성한다.\n• 향후 개선 로드맵과 위험 요소를 명시한다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Production Deployment Preparation",
        "description": "Prepare configuration and environment for Render deployment",
        "details": "- Set production environment variables\n- Optimize Docker images\n- Prepare database migration scripts\n- Set up monitoring and logging\n- Establish backup and recovery procedures",
        "testStrategy": "1. Test production build\n2. Verify environment variables\n3. Run deployment scripts\n4. Check health check endpoints",
        "priority": "low",
        "dependencies": [
          1,
          2,
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "프로덕션 환경 변수 정의 및 설정",
            "description": "Render 배포에 필요한 모든 환경 변수를 식별하고 안전하게 저장한다.",
            "dependencies": [],
            "details": "- 필요한 변수 목록 작성 (.env.example 갱신)\n- Render Dashboard Environment 섹션에 입력\n- 민감 정보는 Secret 으로 저장 및 검증",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Docker 이미지 최적화 및 빌드 파이프라인 구축",
            "description": "애플리케이션 Dockerfile을 최적화하고 CI에서 프로덕션 이미지를 빌드한다.",
            "dependencies": [
              1
            ],
            "details": "- 멀티-스테이지 빌드 적용\n- 불필요한 레이어 제거 및 캐시 전략 설정\n- GitHub Actions/Render Blueprint에 빌드 단계 추가",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "데이터베이스 마이그레이션 스크립트 작성 및 검증",
            "description": "프로덕션 DB 스키마 변경을 위한 마이그레이션 스크립트를 준비하고 테스트한다.",
            "dependencies": [
              1
            ],
            "details": "- 새로운 테이블/인덱스 정의\n- 롤백 스크립트 포함\n- 스테이징 환경에서 적용 후 무결성 검사",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "모니터링 스택 선택 및 Render 통합",
            "description": "애플리케이션 상태 모니터링을 위한 도구를 선정하고 Render 서비스와 연결한다.",
            "dependencies": [
              2
            ],
            "details": "- Grafana Cloud / Prometheus 또는 Render Metrics 활용 검토\n- 애플리케이션 메트릭 노출 엔드포인트 구성\n- 알림 채널(Webhook, Slack) 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "중앙 집중식 로깅 파이프라인 구축",
            "description": "프로덕션 로그를 수집·저장·분석할 수 있는 로깅 솔루션을 설정한다.",
            "dependencies": [
              4
            ],
            "details": "- Logfmt/JSON 구조화 로그 적용\n- Render 로그 스트림을 Logtail/Datadog으로 전달\n- 검색 및 대시보드 구성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "자동 백업 및 복구 절차 수립",
            "description": "DB·파일 스토리지의 주기적 백업과 복구 테스트를 수행한다.",
            "dependencies": [
              3
            ],
            "details": "- Render PostgreSQL 자동 스냅샷 스케줄 설정\n- 오브젝트 스토리지 백업 스크립트 작성\n- 복구 시나리오 문서화 및 연습",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "헬스체크 엔드포인트 구현 및 알람 설정",
            "description": "애플리케이션 헬스체크를 구현하고 Render의 자동 재시작·알림 조건을 지정한다.",
            "dependencies": [
              2
            ],
            "details": "- /healthz, /readyz 엔드포인트 추가\n- 주요 종속 서비스 검사(DB, 캐시)\n- Render Health Check URL 등록 및 실패 임계값 조정",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Documentation and User Guide Creation",
        "description": "Create system usage, admin guide, and API documentation",
        "details": "- Update README.md\n- Write admin user guide\n- Document API endpoints\n- Create installation and deployment guide\n- Write troubleshooting guide",
        "testStrategy": "1. Review documentation content\n2. Test following guides\n3. Verify API documentation accuracy\n4. Collect user feedback",
        "priority": "low",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "사용자 가이드 초안 작성",
            "description": "최종 사용자 관점에서 시스템 기능과 사용 흐름을 설명하는 가이드를 작성한다.",
            "dependencies": [],
            "details": "• 주요 기능별 단계별 스크린샷 포함\n• FAQ 및 자주 발생하는 오류 예시 추가\n• Markdown 포맷으로 docs/user_guide.md 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "관리자 가이드 초안 작성",
            "description": "시스템 관리·운영 담당자를 위한 설정, 권한 관리, 유지보수 절차를 문서화한다.",
            "dependencies": [],
            "details": "• 관리자 대시보드 기능 설명\n• 데이터 백업 및 복구 절차\n• 모니터링 및 로그 조회 방법 포함\n• docs/admin_guide.md 파일 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "API 문서 초안 작성",
            "description": "REST API 엔드포인트, 파라미터, 응답 스키마 및 예제 코드를 정리한다.",
            "dependencies": [],
            "details": "• OpenAPI(Swagger) 스펙 파일 작성\n• 인증 방식 및 오류 코드 표 포함\n• Postman 컬렉션 내보내기",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "설치·배포 가이드 초안 작성",
            "description": "개발·운영 환경별 설치 과정과 Render 배포 절차를 단계별로 작성한다.",
            "dependencies": [],
            "details": "• Docker 이미지 빌드와 환경변수 설정\n• 데이터베이스 마이그레이션 예시\n• CI/CD 파이프라인 설정 설명",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "문제 해결 가이드 초안 작성",
            "description": "일반적인 오류 상황과 해결 방법을 체계적으로 정리한 Troubleshooting 문서를 작성한다.",
            "dependencies": [],
            "details": "• 에러 로그 분석 방법\n• API 연결 실패, 배포 오류 등 사례별 해결책\n• docs/troubleshooting.md 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "문서 통합 리뷰 및 교정",
            "description": "초안 완료된 모든 문서를 검수·교정하고 포맷을 통일한다.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "• 기술 정확성, 용어 통일성 확인\n• 팀 내부 리뷰 및 피드백 반영\n• README.md에 각 문서 링크 추가",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-01-17T15:49:00Z",
      "lastModified": "2025-01-17T15:49:00Z",
      "version": "1.0.0",
      "description": "Tasks for master context"
    }
  }
}