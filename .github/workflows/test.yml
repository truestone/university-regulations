name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  RAILS_ENV: test
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/regulations_test

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-group: ['models', 'workers', 'controllers', 'features', 'integration', 'performance', 'security']
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: regulations_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.8
        bundler-cache: true

    - name: Set up database
      run: |
        bundle exec rails db:create
        bundle exec rails db:migrate
        bundle exec rails db:seed

    - name: Run RuboCop
      run: bundle exec rubocop --parallel

    - name: Run RSpec tests
      env:
        COVERAGE: true
        CI: true
        FAIL_ON_LOW_COVERAGE: true
        TEST_GROUP: ${{ matrix.test-group }}
      run: |
        case "${{ matrix.test-group }}" in
          models)
            bundle exec rspec spec/models --format progress --format RspecJunitFormatter --out tmp/rspec_models.xml
            ;;
          workers)
            bundle exec rspec spec/workers --format progress --format RspecJunitFormatter --out tmp/rspec_workers.xml
            ;;
          controllers)
            bundle exec rspec spec/controllers spec/requests --format progress --format RspecJunitFormatter --out tmp/rspec_controllers.xml
            ;;
          features)
            bundle exec rspec spec/features spec/system --format progress --format RspecJunitFormatter --out tmp/rspec_features.xml
            ;;
          integration)
            bundle exec rspec spec/integration spec/tasks --format progress --format RspecJunitFormatter --out tmp/rspec_integration.xml
            ;;
          performance)
            bundle exec rspec spec/performance --format progress --format RspecJunitFormatter --out tmp/rspec_performance.xml
            ;;
          security)
            bundle exec rspec spec/security --format progress --format RspecJunitFormatter --out tmp/rspec_security.xml
            ;;
        esac

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-group }}
        path: tmp/rspec_*.xml

    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-${{ matrix.test-group }}
        path: |
          tmp/coverage/
          coverage/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.8
        bundler-cache: true

    - name: Run Brakeman security scan
      run: |
        gem install brakeman
        brakeman --format json --output tmp/brakeman_results.json || true

    - name: Run Bundler Audit
      run: |
        bundle exec bundle-audit check --update --format json --output tmp/bundler_audit_results.json || true

    - name: Run dependency vulnerability scan
      run: |
        gem install bundler-audit
        bundle-audit check --update --format json --output tmp/dependency_scan.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: |
          tmp/brakeman_results.json
          tmp/bundler_audit_results.json
          tmp/dependency_scan.json

  coverage-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-*
        merge-multiple: true
        path: coverage-results/

    - name: Merge coverage reports
      run: |
        # Create merged coverage report
        echo "Coverage results from all test groups:" > coverage-summary.txt
        find coverage-results -name "*.json" -exec cat {} \; >> coverage-summary.txt || true

    - name: Upload merged coverage
      uses: actions/upload-artifact@v4
      with:
        name: merged-coverage-report
        path: |
          coverage-results/
          coverage-summary.txt